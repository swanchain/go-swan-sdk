// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PaymentContractMetaData contains all meta data concerning the PaymentContract contract.
var PaymentContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hardwareId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hourlyRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"HardwareSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"taskId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"amountPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"hardwareIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"hourlyRates\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"active\",\"type\":\"bool[]\"}],\"name\":\"batchSetHardware\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hardwareInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pricePerHour\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"refundedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hardwareId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hourlyRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setHardware\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taskManager\",\"type\":\"address\"}],\"name\":\"setTaskManagerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newArWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUuid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hardwareId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"submitPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b5061005261005760201b60201c565b6101f1565b600060019054906101000a900460ff16156100a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009e9061019a565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff16146101155760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff60405161010c91906101d6565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b6000610184602783610117565b915061018f82610128565b604082019050919050565b600060208201905081810360008301526101b381610177565b9050919050565b600060ff82169050919050565b6101d0816101ba565b82525050565b60006020820190506101eb60008301846101c7565b92915050565b6080516139506102286000396000818161053c015281816105ca01528181610727015281816107b5015261086501526139506000f3fe6080604052600436106101295760003560e01c806388bb45bb116100ab578063d365eb6c1161006f578063d365eb6c146103bc578063deaa59df146103e5578063e677334c1461040e578063e94c89301461044b578063f2fde38b14610474578063ffb607191461049d57610129565b806388bb45bb146102d75780638da5cb5b14610300578063a871a3e91461032b578063a9996aed14610354578063c4d66de81461039357610129565b80634f1ef286116100f25780634f1ef2861461022557806352d1902d1461024157806354fd4d501461026c5780636a326ab114610297578063715018a6146102c057610129565b806274f4091461012e57806324d7806c1461016b5780633013ce29146101a85780633659cfe6146101d35780634b0bddd2146101fc575b600080fd5b34801561013a57600080fd5b5061015560048036038101906101509190612051565b6104c6565b60405161016291906120b3565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d919061212c565b6104f4565b60405161019f9190612174565b60405180910390f35b3480156101b457600080fd5b506101bd610514565b6040516101ca91906121ee565b60405180910390f35b3480156101df57600080fd5b506101fa60048036038101906101f5919061212c565b61053a565b005b34801561020857600080fd5b50610223600480360381019061021e9190612235565b6106c2565b005b61023f600480360381019061023a9190612316565b610725565b005b34801561024d57600080fd5b50610256610861565b604051610263919061238b565b60405180910390f35b34801561027857600080fd5b5061028161091a565b60405161028e91906120b3565b60405180910390f35b3480156102a357600080fd5b506102be60048036038101906102b9919061212c565b610923565b005b3480156102cc57600080fd5b506102d561096f565b005b3480156102e357600080fd5b506102fe60048036038101906102f9919061212c565b610983565b005b34801561030c57600080fd5b506103156109cf565b60405161032291906123b5565b60405180910390f35b34801561033757600080fd5b50610352600480360381019061034d91906123fc565b6109f9565b005b34801561036057600080fd5b5061037b6004803603810190610376919061247f565b610ab7565b60405161038a9392919061252b565b60405180910390f35b34801561039f57600080fd5b506103ba60048036038101906103b5919061212c565b610b76565b005b3480156103c857600080fd5b506103e360048036038101906103de91906127d5565b610d56565b005b3480156103f157600080fd5b5061040c6004803603810190610407919061212c565b610efe565b005b34801561041a57600080fd5b5061043560048036038101906104309190612051565b610fce565b60405161044291906120b3565b60405180910390f35b34801561045757600080fd5b50610472600480360381019061046d91906128ac565b610ffc565b005b34801561048057600080fd5b5061049b6004803603810190610496919061212c565b611408565b005b3480156104a957600080fd5b506104c460048036038101906104bf919061291b565b61148b565b005b60ce818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60cb6020528060005260406000206000915054906101000a900460ff1681565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf906129fc565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166106076117ed565b73ffffffffffffffffffffffffffffffffffffffff161461065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490612a8e565b60405180910390fd5b61066681611844565b6106bf81600067ffffffffffffffff81111561068557610684611f26565b5b6040519080825280601f01601f1916602001820160405280156106b75781602001600182028036833780820191505090505b50600061184f565b50565b6106ca6119bd565b8060cb60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036107b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107aa906129fc565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166107f26117ed565b73ffffffffffffffffffffffffffffffffffffffff1614610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083f90612a8e565b60405180910390fd5b61085182611844565b61085d8282600161184f565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e890612b20565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60006004905090565b61092b6119bd565b8060c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6109776119bd565b6109816000611a3b565b565b61098b6119bd565b8060cf60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a016119bd565b604051806060016040528084815260200183815260200182151581525060cc60008681526020019081526020016000206000820151816000019081610a469190612d42565b506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050507fbfbd7b99676dd49757a980378856e1d28c5c3fba3ab80ee007739fe1c87cac7b84848484604051610aa99493929190612e14565b60405180910390a150505050565b60cc602052806000526040600020600091509050806000018054610ada90612b6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0690612b6f565b8015610b535780601f10610b2857610100808354040283529160200191610b53565b820191906000526020600020905b815481529060010190602001808311610b3657829003601f168201915b5050505050908060010154908060020160009054906101000a900460ff16905083565b60008060019054906101000a900460ff16159050808015610ba75750600160008054906101000a900460ff1660ff16105b80610bd45750610bb630611b01565b158015610bd35750600160008054906101000a900460ff1660ff16145b5b610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0a90612ed2565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610c50576001600060016101000a81548160ff0219169083151502179055505b610c58611b24565b610c60611b7d565b8160c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160cb60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508015610d525760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d499190612f3a565b60405180910390a15b5050565b610d5e6119bd565b60005b8451811015610ef7576040518060600160405280858381518110610d8857610d87612f55565b5b60200260200101518152602001848381518110610da857610da7612f55565b5b60200260200101518152602001838381518110610dc857610dc7612f55565b5b6020026020010151151581525060cc6000878481518110610dec57610deb612f55565b5b602002602001015181526020019081526020016000206000820151816000019081610e179190612d42565b506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050507fbfbd7b99676dd49757a980378856e1d28c5c3fba3ab80ee007739fe1c87cac7b858281518110610e7957610e78612f55565b5b6020026020010151858381518110610e9457610e93612f55565b5b6020026020010151858481518110610eaf57610eae612f55565b5b6020026020010151858581518110610eca57610ec9612f55565b5b6020026020010151604051610ee29493929190612e14565b60405180910390a18080600101915050610d61565b5050505050565b60cb60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610f8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8190612ff6565b60405180910390fd5b8060ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60cd818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60cc600083815260200190815260200160002060020160009054906101000a900460ff1661105f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105690613088565b60405180910390fd5b600081610e1060cc6000868152602001908152602001600020600101546110869190613106565b6110909190613137565b90508060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016110ee91906123b5565b602060405180830381865afa15801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f919061318e565b1015611170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116790613207565b60405180910390fd5b8060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016111ce929190613227565b602060405180830381865afa1580156111eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120f919061318e565b1015611250576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112479061329c565b60405180910390fd5b60cf60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2906f1485846040518363ffffffff1660e01b81526004016112ad9291906132bc565b600060405180830381600087803b1580156112c757600080fd5b505af11580156112db573d6000803e3d6000fd5b5050505060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3360ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401611360939291906132ec565b6020604051808303816000875af115801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a39190613338565b508060cd856040516113b591906133a1565b9081526020016040518091039020819055507fb5118c52291bb29d3c8e0b2bdc477f3ab93ffd496162843087d28d0a1e0b7b5e3385836040516113fa939291906133b8565b60405180910390a150505050565b6114106119bd565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361147f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147690613468565b60405180910390fd5b61148881611a3b565b50565b60cb60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150e90612ff6565b60405180910390fd5b8060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161157391906123b5565b602060405180830381865afa158015611590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b4919061318e565b10156115f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ec90613207565b60405180910390fd5b8060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611653929190613227565b602060405180830381865afa158015611670573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611694919061318e565b10156116d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116cc9061329c565b60405180910390fd5b8060ce846040516116e691906133a1565b908152602001604051809103902060008282546117039190613488565b9250508190555060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3384846040518463ffffffff1660e01b8152600401611769939291906132ec565b6020604051808303816000875af1158015611788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ac9190613338565b507feb1f9c839f2c49a478bb26cfe5e3ef6caf398587b0191897965a82480e28d0df8383836040516117e0939291906134bc565b60405180910390a1505050565b600061181b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b611bce565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61184c6119bd565b50565b61187b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b611bd8565b60000160009054906101000a900460ff161561189f5761189a83611be2565b6119b8565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561190757506040513d601f19601f820116820180604052508101906119049190613526565b60015b611946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193d906135c5565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146119ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a290613657565b60405180910390fd5b506119b7838383611c9b565b5b505050565b6119c5611cc7565b73ffffffffffffffffffffffffffffffffffffffff166119e36109cf565b73ffffffffffffffffffffffffffffffffffffffff1614611a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a30906136c3565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6a90613755565b60405180910390fd5b611b7b611ccf565b565b600060019054906101000a900460ff16611bcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc390613755565b60405180910390fd5b565b6000819050919050565b6000819050919050565b611beb81611b01565b611c2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c21906137e7565b60405180910390fd5b80611c577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b611bce565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611ca483611d30565b600082511180611cb15750805b15611cc257611cc08383611d7f565b505b505050565b600033905090565b600060019054906101000a900460ff16611d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1590613755565b60405180910390fd5b611d2e611d29611cc7565b611a3b565b565b611d3981611be2565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060611da483836040518060600160405280602781526020016138f460279139611dac565b905092915050565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051611dd6919061384e565b600060405180830381855af49150503d8060008114611e11576040519150601f19603f3d011682016040523d82523d6000602084013e611e16565b606091505b5091509150611e2786838387611e32565b925050509392505050565b60608315611e94576000835103611e8c57611e4c85611b01565b611e8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e82906138b1565b60405180910390fd5b5b829050611e9f565b611e9e8383611ea7565b5b949350505050565b600082511115611eba5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eee91906138d1565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f5e82611f15565b810181811067ffffffffffffffff82111715611f7d57611f7c611f26565b5b80604052505050565b6000611f90611ef7565b9050611f9c8282611f55565b919050565b600067ffffffffffffffff821115611fbc57611fbb611f26565b5b611fc582611f15565b9050602081019050919050565b82818337600083830152505050565b6000611ff4611fef84611fa1565b611f86565b9050828152602081018484840111156120105761200f611f10565b5b61201b848285611fd2565b509392505050565b600082601f83011261203857612037611f0b565b5b8135612048848260208601611fe1565b91505092915050565b60006020828403121561206757612066611f01565b5b600082013567ffffffffffffffff81111561208557612084611f06565b5b61209184828501612023565b91505092915050565b6000819050919050565b6120ad8161209a565b82525050565b60006020820190506120c860008301846120a4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120f9826120ce565b9050919050565b612109816120ee565b811461211457600080fd5b50565b60008135905061212681612100565b92915050565b60006020828403121561214257612141611f01565b5b600061215084828501612117565b91505092915050565b60008115159050919050565b61216e81612159565b82525050565b60006020820190506121896000830184612165565b92915050565b6000819050919050565b60006121b46121af6121aa846120ce565b61218f565b6120ce565b9050919050565b60006121c682612199565b9050919050565b60006121d8826121bb565b9050919050565b6121e8816121cd565b82525050565b600060208201905061220360008301846121df565b92915050565b61221281612159565b811461221d57600080fd5b50565b60008135905061222f81612209565b92915050565b6000806040838503121561224c5761224b611f01565b5b600061225a85828601612117565b925050602061226b85828601612220565b9150509250929050565b600067ffffffffffffffff8211156122905761228f611f26565b5b61229982611f15565b9050602081019050919050565b60006122b96122b484612275565b611f86565b9050828152602081018484840111156122d5576122d4611f10565b5b6122e0848285611fd2565b509392505050565b600082601f8301126122fd576122fc611f0b565b5b813561230d8482602086016122a6565b91505092915050565b6000806040838503121561232d5761232c611f01565b5b600061233b85828601612117565b925050602083013567ffffffffffffffff81111561235c5761235b611f06565b5b612368858286016122e8565b9150509250929050565b6000819050919050565b61238581612372565b82525050565b60006020820190506123a0600083018461237c565b92915050565b6123af816120ee565b82525050565b60006020820190506123ca60008301846123a6565b92915050565b6123d98161209a565b81146123e457600080fd5b50565b6000813590506123f6816123d0565b92915050565b6000806000806080858703121561241657612415611f01565b5b6000612424878288016123e7565b945050602085013567ffffffffffffffff81111561244557612444611f06565b5b61245187828801612023565b9350506040612462878288016123e7565b925050606061247387828801612220565b91505092959194509250565b60006020828403121561249557612494611f01565b5b60006124a3848285016123e7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156124e65780820151818401526020810190506124cb565b60008484015250505050565b60006124fd826124ac565b61250781856124b7565b93506125178185602086016124c8565b61252081611f15565b840191505092915050565b6000606082019050818103600083015261254581866124f2565b905061255460208301856120a4565b6125616040830184612165565b949350505050565b600067ffffffffffffffff82111561258457612583611f26565b5b602082029050602081019050919050565b600080fd5b60006125ad6125a884612569565b611f86565b905080838252602082019050602084028301858111156125d0576125cf612595565b5b835b818110156125f957806125e588826123e7565b8452602084019350506020810190506125d2565b5050509392505050565b600082601f83011261261857612617611f0b565b5b813561262884826020860161259a565b91505092915050565b600067ffffffffffffffff82111561264c5761264b611f26565b5b602082029050602081019050919050565b600061267061266b84612631565b611f86565b9050808382526020820190506020840283018581111561269357612692612595565b5b835b818110156126da57803567ffffffffffffffff8111156126b8576126b7611f0b565b5b8086016126c58982612023565b85526020850194505050602081019050612695565b5050509392505050565b600082601f8301126126f9576126f8611f0b565b5b813561270984826020860161265d565b91505092915050565b600067ffffffffffffffff82111561272d5761272c611f26565b5b602082029050602081019050919050565b600061275161274c84612712565b611f86565b9050808382526020820190506020840283018581111561277457612773612595565b5b835b8181101561279d57806127898882612220565b845260208401935050602081019050612776565b5050509392505050565b600082601f8301126127bc576127bb611f0b565b5b81356127cc84826020860161273e565b91505092915050565b600080600080608085870312156127ef576127ee611f01565b5b600085013567ffffffffffffffff81111561280d5761280c611f06565b5b61281987828801612603565b945050602085013567ffffffffffffffff81111561283a57612839611f06565b5b612846878288016126e4565b935050604085013567ffffffffffffffff81111561286757612866611f06565b5b61287387828801612603565b925050606085013567ffffffffffffffff81111561289457612893611f06565b5b6128a0878288016127a7565b91505092959194509250565b6000806000606084860312156128c5576128c4611f01565b5b600084013567ffffffffffffffff8111156128e3576128e2611f06565b5b6128ef86828701612023565b9350506020612900868287016123e7565b9250506040612911868287016123e7565b9150509250925092565b60008060006060848603121561293457612933611f01565b5b600084013567ffffffffffffffff81111561295257612951611f06565b5b61295e86828701612023565b935050602061296f86828701612117565b9250506040612980868287016123e7565b9150509250925092565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b60006129e6602c836124b7565b91506129f18261298a565b604082019050919050565b60006020820190508181036000830152612a15816129d9565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000612a78602c836124b7565b9150612a8382612a1c565b604082019050919050565b60006020820190508181036000830152612aa781612a6b565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000612b0a6038836124b7565b9150612b1582612aae565b604082019050919050565b60006020820190508181036000830152612b3981612afd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612b8757607f821691505b602082108103612b9a57612b99612b40565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612c027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612bc5565b612c0c8683612bc5565b95508019841693508086168417925050509392505050565b6000612c3f612c3a612c358461209a565b61218f565b61209a565b9050919050565b6000819050919050565b612c5983612c24565b612c6d612c6582612c46565b848454612bd2565b825550505050565b600090565b612c82612c75565b612c8d818484612c50565b505050565b5b81811015612cb157612ca6600082612c7a565b600181019050612c93565b5050565b601f821115612cf657612cc781612ba0565b612cd084612bb5565b81016020851015612cdf578190505b612cf3612ceb85612bb5565b830182612c92565b50505b505050565b600082821c905092915050565b6000612d1960001984600802612cfb565b1980831691505092915050565b6000612d328383612d08565b9150826002028217905092915050565b612d4b826124ac565b67ffffffffffffffff811115612d6457612d63611f26565b5b612d6e8254612b6f565b612d79828285612cb5565b600060209050601f831160018114612dac5760008415612d9a578287015190505b612da48582612d26565b865550612e0c565b601f198416612dba86612ba0565b60005b82811015612de257848901518255600182019150602085019450602081019050612dbd565b86831015612dff5784890151612dfb601f891682612d08565b8355505b6001600288020188555050505b505050505050565b6000608082019050612e2960008301876120a4565b8181036020830152612e3b81866124f2565b9050612e4a60408301856120a4565b612e576060830184612165565b95945050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612ebc602e836124b7565b9150612ec782612e60565b604082019050919050565b60006020820190508181036000830152612eeb81612eaf565b9050919050565b6000819050919050565b600060ff82169050919050565b6000612f24612f1f612f1a84612ef2565b61218f565b612efc565b9050919050565b612f3481612f09565b82525050565b6000602082019050612f4f6000830184612f2b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f6e6c79207468652061646d696e2063616e2063616c6c20746869732066756e60008201527f6374696f6e2e0000000000000000000000000000000000000000000000000000602082015250565b6000612fe06026836124b7565b9150612feb82612f84565b604082019050919050565b6000602082019050818103600083015261300f81612fd3565b9050919050565b7f526571756573746564206861726477617265206973206e6f7420737570706f7260008201527f7465642e00000000000000000000000000000000000000000000000000000000602082015250565b60006130726024836124b7565b915061307d82613016565b604082019050919050565b600060208201905081810360008301526130a181613065565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131118261209a565b915061311c8361209a565b92508261312c5761312b6130a8565b5b828204905092915050565b60006131428261209a565b915061314d8361209a565b925082820261315b8161209a565b91508282048414831517613172576131716130d7565b5b5092915050565b600081519050613188816123d0565b92915050565b6000602082840312156131a4576131a3611f01565b5b60006131b284828501613179565b91505092915050565b7f496e73756666696369656e742066756e64732e00000000000000000000000000600082015250565b60006131f16013836124b7565b91506131fc826131bb565b602082019050919050565b60006020820190508181036000830152613220816131e4565b9050919050565b600060408201905061323c60008301856123a6565b61324960208301846123a6565b9392505050565b7f417070726f7665207370656e64696e672066756e64732e000000000000000000600082015250565b60006132866017836124b7565b915061329182613250565b602082019050919050565b600060208201905081810360008301526132b581613279565b9050919050565b600060408201905081810360008301526132d681856124f2565b90506132e560208301846120a4565b9392505050565b600060608201905061330160008301866123a6565b61330e60208301856123a6565b61331b60408301846120a4565b949350505050565b60008151905061333281612209565b92915050565b60006020828403121561334e5761334d611f01565b5b600061335c84828501613323565b91505092915050565b600081905092915050565b600061337b826124ac565b6133858185613365565b93506133958185602086016124c8565b80840191505092915050565b60006133ad8284613370565b915081905092915050565b60006060820190506133cd60008301866123a6565b81810360208301526133df81856124f2565b90506133ee60408301846120a4565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006134526026836124b7565b915061345d826133f6565b604082019050919050565b6000602082019050818103600083015261348181613445565b9050919050565b60006134938261209a565b915061349e8361209a565b92508282019050808211156134b6576134b56130d7565b5b92915050565b600060608201905081810360008301526134d681866124f2565b90506134e560208301856123a6565b6134f260408301846120a4565b949350505050565b61350381612372565b811461350e57600080fd5b50565b600081519050613520816134fa565b92915050565b60006020828403121561353c5761353b611f01565b5b600061354a84828501613511565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b60006135af602e836124b7565b91506135ba82613553565b604082019050919050565b600060208201905081810360008301526135de816135a2565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b60006136416029836124b7565b915061364c826135e5565b604082019050919050565b6000602082019050818103600083015261367081613634565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006136ad6020836124b7565b91506136b882613677565b602082019050919050565b600060208201905081810360008301526136dc816136a0565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061373f602b836124b7565b915061374a826136e3565b604082019050919050565b6000602082019050818103600083015261376e81613732565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006137d1602d836124b7565b91506137dc82613775565b604082019050919050565b60006020820190508181036000830152613800816137c4565b9050919050565b600081519050919050565b600081905092915050565b600061382882613807565b6138328185613812565b93506138428185602086016124c8565b80840191505092915050565b600061385a828461381d565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061389b601d836124b7565b91506138a682613865565b602082019050919050565b600060208201905081810360008301526138ca8161388e565b9050919050565b600060208201905081810360008301526138eb81846124f2565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122040a5ed690190f90ddc6240b78149b5d2945b33783e98f3b86ab67709f14cf88464736f6c63430008190033",
}

// PaymentContractABI is the input ABI used to generate the binding from.
// Deprecated: Use PaymentContractMetaData.ABI instead.
var PaymentContractABI = PaymentContractMetaData.ABI

// PaymentContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PaymentContractMetaData.Bin instead.
var PaymentContractBin = PaymentContractMetaData.Bin

// DeployPaymentContract deploys a new Ethereum contract, binding an instance of PaymentContract to it.
func DeployPaymentContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PaymentContract, error) {
	parsed, err := PaymentContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PaymentContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PaymentContract{PaymentContractCaller: PaymentContractCaller{contract: contract}, PaymentContractTransactor: PaymentContractTransactor{contract: contract}, PaymentContractFilterer: PaymentContractFilterer{contract: contract}}, nil
}

// PaymentContract is an auto generated Go binding around an Ethereum contract.
type PaymentContract struct {
	PaymentContractCaller     // Read-only binding to the contract
	PaymentContractTransactor // Write-only binding to the contract
	PaymentContractFilterer   // Log filterer for contract events
}

// PaymentContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type PaymentContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaymentContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PaymentContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaymentContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PaymentContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaymentContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PaymentContractSession struct {
	Contract     *PaymentContract  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PaymentContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PaymentContractCallerSession struct {
	Contract *PaymentContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// PaymentContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PaymentContractTransactorSession struct {
	Contract     *PaymentContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// PaymentContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type PaymentContractRaw struct {
	Contract *PaymentContract // Generic contract binding to access the raw methods on
}

// PaymentContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PaymentContractCallerRaw struct {
	Contract *PaymentContractCaller // Generic read-only contract binding to access the raw methods on
}

// PaymentContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PaymentContractTransactorRaw struct {
	Contract *PaymentContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPaymentContract creates a new instance of PaymentContract, bound to a specific deployed contract.
func NewPaymentContract(address common.Address, backend bind.ContractBackend) (*PaymentContract, error) {
	contract, err := bindPaymentContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PaymentContract{PaymentContractCaller: PaymentContractCaller{contract: contract}, PaymentContractTransactor: PaymentContractTransactor{contract: contract}, PaymentContractFilterer: PaymentContractFilterer{contract: contract}}, nil
}

// NewPaymentContractCaller creates a new read-only instance of PaymentContract, bound to a specific deployed contract.
func NewPaymentContractCaller(address common.Address, caller bind.ContractCaller) (*PaymentContractCaller, error) {
	contract, err := bindPaymentContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PaymentContractCaller{contract: contract}, nil
}

// NewPaymentContractTransactor creates a new write-only instance of PaymentContract, bound to a specific deployed contract.
func NewPaymentContractTransactor(address common.Address, transactor bind.ContractTransactor) (*PaymentContractTransactor, error) {
	contract, err := bindPaymentContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PaymentContractTransactor{contract: contract}, nil
}

// NewPaymentContractFilterer creates a new log filterer instance of PaymentContract, bound to a specific deployed contract.
func NewPaymentContractFilterer(address common.Address, filterer bind.ContractFilterer) (*PaymentContractFilterer, error) {
	contract, err := bindPaymentContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PaymentContractFilterer{contract: contract}, nil
}

// bindPaymentContract binds a generic wrapper to an already deployed contract.
func bindPaymentContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PaymentContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PaymentContract *PaymentContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PaymentContract.Contract.PaymentContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PaymentContract *PaymentContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaymentContract.Contract.PaymentContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PaymentContract *PaymentContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PaymentContract.Contract.PaymentContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PaymentContract *PaymentContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PaymentContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PaymentContract *PaymentContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaymentContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PaymentContract *PaymentContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PaymentContract.Contract.contract.Transact(opts, method, params...)
}

// AmountPaid is a free data retrieval call binding the contract method 0xe677334c.
//
// Solidity: function amountPaid(string ) view returns(uint256)
func (_PaymentContract *PaymentContractCaller) AmountPaid(opts *bind.CallOpts, arg0 string) (*big.Int, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "amountPaid", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountPaid is a free data retrieval call binding the contract method 0xe677334c.
//
// Solidity: function amountPaid(string ) view returns(uint256)
func (_PaymentContract *PaymentContractSession) AmountPaid(arg0 string) (*big.Int, error) {
	return _PaymentContract.Contract.AmountPaid(&_PaymentContract.CallOpts, arg0)
}

// AmountPaid is a free data retrieval call binding the contract method 0xe677334c.
//
// Solidity: function amountPaid(string ) view returns(uint256)
func (_PaymentContract *PaymentContractCallerSession) AmountPaid(arg0 string) (*big.Int, error) {
	return _PaymentContract.Contract.AmountPaid(&_PaymentContract.CallOpts, arg0)
}

// HardwareInfo is a free data retrieval call binding the contract method 0xa9996aed.
//
// Solidity: function hardwareInfo(uint256 ) view returns(string name, uint256 pricePerHour, bool isActive)
func (_PaymentContract *PaymentContractCaller) HardwareInfo(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Name         string
	PricePerHour *big.Int
	IsActive     bool
}, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "hardwareInfo", arg0)

	outstruct := new(struct {
		Name         string
		PricePerHour *big.Int
		IsActive     bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.PricePerHour = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.IsActive = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// HardwareInfo is a free data retrieval call binding the contract method 0xa9996aed.
//
// Solidity: function hardwareInfo(uint256 ) view returns(string name, uint256 pricePerHour, bool isActive)
func (_PaymentContract *PaymentContractSession) HardwareInfo(arg0 *big.Int) (struct {
	Name         string
	PricePerHour *big.Int
	IsActive     bool
}, error) {
	return _PaymentContract.Contract.HardwareInfo(&_PaymentContract.CallOpts, arg0)
}

// HardwareInfo is a free data retrieval call binding the contract method 0xa9996aed.
//
// Solidity: function hardwareInfo(uint256 ) view returns(string name, uint256 pricePerHour, bool isActive)
func (_PaymentContract *PaymentContractCallerSession) HardwareInfo(arg0 *big.Int) (struct {
	Name         string
	PricePerHour *big.Int
	IsActive     bool
}, error) {
	return _PaymentContract.Contract.HardwareInfo(&_PaymentContract.CallOpts, arg0)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_PaymentContract *PaymentContractCaller) IsAdmin(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "isAdmin", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_PaymentContract *PaymentContractSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _PaymentContract.Contract.IsAdmin(&_PaymentContract.CallOpts, arg0)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_PaymentContract *PaymentContractCallerSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _PaymentContract.Contract.IsAdmin(&_PaymentContract.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaymentContract *PaymentContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaymentContract *PaymentContractSession) Owner() (common.Address, error) {
	return _PaymentContract.Contract.Owner(&_PaymentContract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaymentContract *PaymentContractCallerSession) Owner() (common.Address, error) {
	return _PaymentContract.Contract.Owner(&_PaymentContract.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_PaymentContract *PaymentContractCaller) PaymentToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "paymentToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_PaymentContract *PaymentContractSession) PaymentToken() (common.Address, error) {
	return _PaymentContract.Contract.PaymentToken(&_PaymentContract.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_PaymentContract *PaymentContractCallerSession) PaymentToken() (common.Address, error) {
	return _PaymentContract.Contract.PaymentToken(&_PaymentContract.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_PaymentContract *PaymentContractCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_PaymentContract *PaymentContractSession) ProxiableUUID() ([32]byte, error) {
	return _PaymentContract.Contract.ProxiableUUID(&_PaymentContract.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_PaymentContract *PaymentContractCallerSession) ProxiableUUID() ([32]byte, error) {
	return _PaymentContract.Contract.ProxiableUUID(&_PaymentContract.CallOpts)
}

// RefundedAmount is a free data retrieval call binding the contract method 0x0074f409.
//
// Solidity: function refundedAmount(string ) view returns(uint256)
func (_PaymentContract *PaymentContractCaller) RefundedAmount(opts *bind.CallOpts, arg0 string) (*big.Int, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "refundedAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RefundedAmount is a free data retrieval call binding the contract method 0x0074f409.
//
// Solidity: function refundedAmount(string ) view returns(uint256)
func (_PaymentContract *PaymentContractSession) RefundedAmount(arg0 string) (*big.Int, error) {
	return _PaymentContract.Contract.RefundedAmount(&_PaymentContract.CallOpts, arg0)
}

// RefundedAmount is a free data retrieval call binding the contract method 0x0074f409.
//
// Solidity: function refundedAmount(string ) view returns(uint256)
func (_PaymentContract *PaymentContractCallerSession) RefundedAmount(arg0 string) (*big.Int, error) {
	return _PaymentContract.Contract.RefundedAmount(&_PaymentContract.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_PaymentContract *PaymentContractCaller) Version(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_PaymentContract *PaymentContractSession) Version() (*big.Int, error) {
	return _PaymentContract.Contract.Version(&_PaymentContract.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_PaymentContract *PaymentContractCallerSession) Version() (*big.Int, error) {
	return _PaymentContract.Contract.Version(&_PaymentContract.CallOpts)
}

// BatchSetHardware is a paid mutator transaction binding the contract method 0xd365eb6c.
//
// Solidity: function batchSetHardware(uint256[] hardwareIds, string[] names, uint256[] hourlyRates, bool[] active) returns()
func (_PaymentContract *PaymentContractTransactor) BatchSetHardware(opts *bind.TransactOpts, hardwareIds []*big.Int, names []string, hourlyRates []*big.Int, active []bool) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "batchSetHardware", hardwareIds, names, hourlyRates, active)
}

// BatchSetHardware is a paid mutator transaction binding the contract method 0xd365eb6c.
//
// Solidity: function batchSetHardware(uint256[] hardwareIds, string[] names, uint256[] hourlyRates, bool[] active) returns()
func (_PaymentContract *PaymentContractSession) BatchSetHardware(hardwareIds []*big.Int, names []string, hourlyRates []*big.Int, active []bool) (*types.Transaction, error) {
	return _PaymentContract.Contract.BatchSetHardware(&_PaymentContract.TransactOpts, hardwareIds, names, hourlyRates, active)
}

// BatchSetHardware is a paid mutator transaction binding the contract method 0xd365eb6c.
//
// Solidity: function batchSetHardware(uint256[] hardwareIds, string[] names, uint256[] hourlyRates, bool[] active) returns()
func (_PaymentContract *PaymentContractTransactorSession) BatchSetHardware(hardwareIds []*big.Int, names []string, hourlyRates []*big.Int, active []bool) (*types.Transaction, error) {
	return _PaymentContract.Contract.BatchSetHardware(&_PaymentContract.TransactOpts, hardwareIds, names, hourlyRates, active)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address inToken) returns()
func (_PaymentContract *PaymentContractTransactor) Initialize(opts *bind.TransactOpts, inToken common.Address) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "initialize", inToken)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address inToken) returns()
func (_PaymentContract *PaymentContractSession) Initialize(inToken common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.Initialize(&_PaymentContract.TransactOpts, inToken)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address inToken) returns()
func (_PaymentContract *PaymentContractTransactorSession) Initialize(inToken common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.Initialize(&_PaymentContract.TransactOpts, inToken)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaymentContract *PaymentContractTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaymentContract *PaymentContractSession) RenounceOwnership() (*types.Transaction, error) {
	return _PaymentContract.Contract.RenounceOwnership(&_PaymentContract.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaymentContract *PaymentContractTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PaymentContract.Contract.RenounceOwnership(&_PaymentContract.TransactOpts)
}

// SendRefund is a paid mutator transaction binding the contract method 0xffb60719.
//
// Solidity: function sendRefund(string taskId, address user, uint256 amount) returns()
func (_PaymentContract *PaymentContractTransactor) SendRefund(opts *bind.TransactOpts, taskId string, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "sendRefund", taskId, user, amount)
}

// SendRefund is a paid mutator transaction binding the contract method 0xffb60719.
//
// Solidity: function sendRefund(string taskId, address user, uint256 amount) returns()
func (_PaymentContract *PaymentContractSession) SendRefund(taskId string, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PaymentContract.Contract.SendRefund(&_PaymentContract.TransactOpts, taskId, user, amount)
}

// SendRefund is a paid mutator transaction binding the contract method 0xffb60719.
//
// Solidity: function sendRefund(string taskId, address user, uint256 amount) returns()
func (_PaymentContract *PaymentContractTransactorSession) SendRefund(taskId string, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PaymentContract.Contract.SendRefund(&_PaymentContract.TransactOpts, taskId, user, amount)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x4b0bddd2.
//
// Solidity: function setAdmin(address admin, bool status) returns()
func (_PaymentContract *PaymentContractTransactor) SetAdmin(opts *bind.TransactOpts, admin common.Address, status bool) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "setAdmin", admin, status)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x4b0bddd2.
//
// Solidity: function setAdmin(address admin, bool status) returns()
func (_PaymentContract *PaymentContractSession) SetAdmin(admin common.Address, status bool) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetAdmin(&_PaymentContract.TransactOpts, admin, status)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x4b0bddd2.
//
// Solidity: function setAdmin(address admin, bool status) returns()
func (_PaymentContract *PaymentContractTransactorSession) SetAdmin(admin common.Address, status bool) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetAdmin(&_PaymentContract.TransactOpts, admin, status)
}

// SetHardware is a paid mutator transaction binding the contract method 0xa871a3e9.
//
// Solidity: function setHardware(uint256 hardwareId, string name, uint256 hourlyRate, bool active) returns()
func (_PaymentContract *PaymentContractTransactor) SetHardware(opts *bind.TransactOpts, hardwareId *big.Int, name string, hourlyRate *big.Int, active bool) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "setHardware", hardwareId, name, hourlyRate, active)
}

// SetHardware is a paid mutator transaction binding the contract method 0xa871a3e9.
//
// Solidity: function setHardware(uint256 hardwareId, string name, uint256 hourlyRate, bool active) returns()
func (_PaymentContract *PaymentContractSession) SetHardware(hardwareId *big.Int, name string, hourlyRate *big.Int, active bool) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetHardware(&_PaymentContract.TransactOpts, hardwareId, name, hourlyRate, active)
}

// SetHardware is a paid mutator transaction binding the contract method 0xa871a3e9.
//
// Solidity: function setHardware(uint256 hardwareId, string name, uint256 hourlyRate, bool active) returns()
func (_PaymentContract *PaymentContractTransactorSession) SetHardware(hardwareId *big.Int, name string, hourlyRate *big.Int, active bool) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetHardware(&_PaymentContract.TransactOpts, hardwareId, name, hourlyRate, active)
}

// SetPaymentToken is a paid mutator transaction binding the contract method 0x6a326ab1.
//
// Solidity: function setPaymentToken(address token) returns()
func (_PaymentContract *PaymentContractTransactor) SetPaymentToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "setPaymentToken", token)
}

// SetPaymentToken is a paid mutator transaction binding the contract method 0x6a326ab1.
//
// Solidity: function setPaymentToken(address token) returns()
func (_PaymentContract *PaymentContractSession) SetPaymentToken(token common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetPaymentToken(&_PaymentContract.TransactOpts, token)
}

// SetPaymentToken is a paid mutator transaction binding the contract method 0x6a326ab1.
//
// Solidity: function setPaymentToken(address token) returns()
func (_PaymentContract *PaymentContractTransactorSession) SetPaymentToken(token common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetPaymentToken(&_PaymentContract.TransactOpts, token)
}

// SetTaskManagerAddress is a paid mutator transaction binding the contract method 0x88bb45bb.
//
// Solidity: function setTaskManagerAddress(address taskManager) returns()
func (_PaymentContract *PaymentContractTransactor) SetTaskManagerAddress(opts *bind.TransactOpts, taskManager common.Address) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "setTaskManagerAddress", taskManager)
}

// SetTaskManagerAddress is a paid mutator transaction binding the contract method 0x88bb45bb.
//
// Solidity: function setTaskManagerAddress(address taskManager) returns()
func (_PaymentContract *PaymentContractSession) SetTaskManagerAddress(taskManager common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetTaskManagerAddress(&_PaymentContract.TransactOpts, taskManager)
}

// SetTaskManagerAddress is a paid mutator transaction binding the contract method 0x88bb45bb.
//
// Solidity: function setTaskManagerAddress(address taskManager) returns()
func (_PaymentContract *PaymentContractTransactorSession) SetTaskManagerAddress(taskManager common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetTaskManagerAddress(&_PaymentContract.TransactOpts, taskManager)
}

// SetWallet is a paid mutator transaction binding the contract method 0xdeaa59df.
//
// Solidity: function setWallet(address newArWallet) returns()
func (_PaymentContract *PaymentContractTransactor) SetWallet(opts *bind.TransactOpts, newArWallet common.Address) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "setWallet", newArWallet)
}

// SetWallet is a paid mutator transaction binding the contract method 0xdeaa59df.
//
// Solidity: function setWallet(address newArWallet) returns()
func (_PaymentContract *PaymentContractSession) SetWallet(newArWallet common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetWallet(&_PaymentContract.TransactOpts, newArWallet)
}

// SetWallet is a paid mutator transaction binding the contract method 0xdeaa59df.
//
// Solidity: function setWallet(address newArWallet) returns()
func (_PaymentContract *PaymentContractTransactorSession) SetWallet(newArWallet common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetWallet(&_PaymentContract.TransactOpts, newArWallet)
}

// SubmitPayment is a paid mutator transaction binding the contract method 0xe94c8930.
//
// Solidity: function submitPayment(string taskUuid, uint256 hardwareId, uint256 duration) returns()
func (_PaymentContract *PaymentContractTransactor) SubmitPayment(opts *bind.TransactOpts, taskUuid string, hardwareId *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "submitPayment", taskUuid, hardwareId, duration)
}

// SubmitPayment is a paid mutator transaction binding the contract method 0xe94c8930.
//
// Solidity: function submitPayment(string taskUuid, uint256 hardwareId, uint256 duration) returns()
func (_PaymentContract *PaymentContractSession) SubmitPayment(taskUuid string, hardwareId *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _PaymentContract.Contract.SubmitPayment(&_PaymentContract.TransactOpts, taskUuid, hardwareId, duration)
}

// SubmitPayment is a paid mutator transaction binding the contract method 0xe94c8930.
//
// Solidity: function submitPayment(string taskUuid, uint256 hardwareId, uint256 duration) returns()
func (_PaymentContract *PaymentContractTransactorSession) SubmitPayment(taskUuid string, hardwareId *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _PaymentContract.Contract.SubmitPayment(&_PaymentContract.TransactOpts, taskUuid, hardwareId, duration)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaymentContract *PaymentContractTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaymentContract *PaymentContractSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.TransferOwnership(&_PaymentContract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaymentContract *PaymentContractTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.TransferOwnership(&_PaymentContract.TransactOpts, newOwner)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_PaymentContract *PaymentContractTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_PaymentContract *PaymentContractSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.UpgradeTo(&_PaymentContract.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_PaymentContract *PaymentContractTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.UpgradeTo(&_PaymentContract.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_PaymentContract *PaymentContractTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_PaymentContract *PaymentContractSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _PaymentContract.Contract.UpgradeToAndCall(&_PaymentContract.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_PaymentContract *PaymentContractTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _PaymentContract.Contract.UpgradeToAndCall(&_PaymentContract.TransactOpts, newImplementation, data)
}

// PaymentContractAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the PaymentContract contract.
type PaymentContractAdminChangedIterator struct {
	Event *PaymentContractAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractAdminChanged represents a AdminChanged event raised by the PaymentContract contract.
type PaymentContractAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_PaymentContract *PaymentContractFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*PaymentContractAdminChangedIterator, error) {

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &PaymentContractAdminChangedIterator{contract: _PaymentContract.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_PaymentContract *PaymentContractFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *PaymentContractAdminChanged) (event.Subscription, error) {

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractAdminChanged)
				if err := _PaymentContract.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_PaymentContract *PaymentContractFilterer) ParseAdminChanged(log types.Log) (*PaymentContractAdminChanged, error) {
	event := new(PaymentContractAdminChanged)
	if err := _PaymentContract.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the PaymentContract contract.
type PaymentContractBeaconUpgradedIterator struct {
	Event *PaymentContractBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractBeaconUpgraded represents a BeaconUpgraded event raised by the PaymentContract contract.
type PaymentContractBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_PaymentContract *PaymentContractFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*PaymentContractBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &PaymentContractBeaconUpgradedIterator{contract: _PaymentContract.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_PaymentContract *PaymentContractFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *PaymentContractBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractBeaconUpgraded)
				if err := _PaymentContract.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_PaymentContract *PaymentContractFilterer) ParseBeaconUpgraded(log types.Log) (*PaymentContractBeaconUpgraded, error) {
	event := new(PaymentContractBeaconUpgraded)
	if err := _PaymentContract.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractHardwareSetIterator is returned from FilterHardwareSet and is used to iterate over the raw logs and unpacked data for HardwareSet events raised by the PaymentContract contract.
type PaymentContractHardwareSetIterator struct {
	Event *PaymentContractHardwareSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractHardwareSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractHardwareSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractHardwareSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractHardwareSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractHardwareSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractHardwareSet represents a HardwareSet event raised by the PaymentContract contract.
type PaymentContractHardwareSet struct {
	HardwareId *big.Int
	Name       string
	HourlyRate *big.Int
	Active     bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterHardwareSet is a free log retrieval operation binding the contract event 0xbfbd7b99676dd49757a980378856e1d28c5c3fba3ab80ee007739fe1c87cac7b.
//
// Solidity: event HardwareSet(uint256 hardwareId, string name, uint256 hourlyRate, bool active)
func (_PaymentContract *PaymentContractFilterer) FilterHardwareSet(opts *bind.FilterOpts) (*PaymentContractHardwareSetIterator, error) {

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "HardwareSet")
	if err != nil {
		return nil, err
	}
	return &PaymentContractHardwareSetIterator{contract: _PaymentContract.contract, event: "HardwareSet", logs: logs, sub: sub}, nil
}

// WatchHardwareSet is a free log subscription operation binding the contract event 0xbfbd7b99676dd49757a980378856e1d28c5c3fba3ab80ee007739fe1c87cac7b.
//
// Solidity: event HardwareSet(uint256 hardwareId, string name, uint256 hourlyRate, bool active)
func (_PaymentContract *PaymentContractFilterer) WatchHardwareSet(opts *bind.WatchOpts, sink chan<- *PaymentContractHardwareSet) (event.Subscription, error) {

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "HardwareSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractHardwareSet)
				if err := _PaymentContract.contract.UnpackLog(event, "HardwareSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHardwareSet is a log parse operation binding the contract event 0xbfbd7b99676dd49757a980378856e1d28c5c3fba3ab80ee007739fe1c87cac7b.
//
// Solidity: event HardwareSet(uint256 hardwareId, string name, uint256 hourlyRate, bool active)
func (_PaymentContract *PaymentContractFilterer) ParseHardwareSet(log types.Log) (*PaymentContractHardwareSet, error) {
	event := new(PaymentContractHardwareSet)
	if err := _PaymentContract.contract.UnpackLog(event, "HardwareSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the PaymentContract contract.
type PaymentContractInitializedIterator struct {
	Event *PaymentContractInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractInitialized represents a Initialized event raised by the PaymentContract contract.
type PaymentContractInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PaymentContract *PaymentContractFilterer) FilterInitialized(opts *bind.FilterOpts) (*PaymentContractInitializedIterator, error) {

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PaymentContractInitializedIterator{contract: _PaymentContract.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PaymentContract *PaymentContractFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PaymentContractInitialized) (event.Subscription, error) {

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractInitialized)
				if err := _PaymentContract.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PaymentContract *PaymentContractFilterer) ParseInitialized(log types.Log) (*PaymentContractInitialized, error) {
	event := new(PaymentContractInitialized)
	if err := _PaymentContract.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PaymentContract contract.
type PaymentContractOwnershipTransferredIterator struct {
	Event *PaymentContractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractOwnershipTransferred represents a OwnershipTransferred event raised by the PaymentContract contract.
type PaymentContractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaymentContract *PaymentContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PaymentContractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PaymentContractOwnershipTransferredIterator{contract: _PaymentContract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaymentContract *PaymentContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PaymentContractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractOwnershipTransferred)
				if err := _PaymentContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaymentContract *PaymentContractFilterer) ParseOwnershipTransferred(log types.Log) (*PaymentContractOwnershipTransferred, error) {
	event := new(PaymentContractOwnershipTransferred)
	if err := _PaymentContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractPaymentIterator is returned from FilterPayment and is used to iterate over the raw logs and unpacked data for Payment events raised by the PaymentContract contract.
type PaymentContractPaymentIterator struct {
	Event *PaymentContractPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractPayment represents a Payment event raised by the PaymentContract contract.
type PaymentContractPayment struct {
	Payer  common.Address
	Uuid   string
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPayment is a free log retrieval operation binding the contract event 0xb5118c52291bb29d3c8e0b2bdc477f3ab93ffd496162843087d28d0a1e0b7b5e.
//
// Solidity: event Payment(address payer, string uuid, uint256 amount)
func (_PaymentContract *PaymentContractFilterer) FilterPayment(opts *bind.FilterOpts) (*PaymentContractPaymentIterator, error) {

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "Payment")
	if err != nil {
		return nil, err
	}
	return &PaymentContractPaymentIterator{contract: _PaymentContract.contract, event: "Payment", logs: logs, sub: sub}, nil
}

// WatchPayment is a free log subscription operation binding the contract event 0xb5118c52291bb29d3c8e0b2bdc477f3ab93ffd496162843087d28d0a1e0b7b5e.
//
// Solidity: event Payment(address payer, string uuid, uint256 amount)
func (_PaymentContract *PaymentContractFilterer) WatchPayment(opts *bind.WatchOpts, sink chan<- *PaymentContractPayment) (event.Subscription, error) {

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "Payment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractPayment)
				if err := _PaymentContract.contract.UnpackLog(event, "Payment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePayment is a log parse operation binding the contract event 0xb5118c52291bb29d3c8e0b2bdc477f3ab93ffd496162843087d28d0a1e0b7b5e.
//
// Solidity: event Payment(address payer, string uuid, uint256 amount)
func (_PaymentContract *PaymentContractFilterer) ParsePayment(log types.Log) (*PaymentContractPayment, error) {
	event := new(PaymentContractPayment)
	if err := _PaymentContract.contract.UnpackLog(event, "Payment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractRefundIterator is returned from FilterRefund and is used to iterate over the raw logs and unpacked data for Refund events raised by the PaymentContract contract.
type PaymentContractRefundIterator struct {
	Event *PaymentContractRefund // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractRefundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractRefund)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractRefund)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractRefundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractRefundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractRefund represents a Refund event raised by the PaymentContract contract.
type PaymentContractRefund struct {
	TaskId string
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRefund is a free log retrieval operation binding the contract event 0xeb1f9c839f2c49a478bb26cfe5e3ef6caf398587b0191897965a82480e28d0df.
//
// Solidity: event Refund(string taskId, address to, uint256 amount)
func (_PaymentContract *PaymentContractFilterer) FilterRefund(opts *bind.FilterOpts) (*PaymentContractRefundIterator, error) {

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "Refund")
	if err != nil {
		return nil, err
	}
	return &PaymentContractRefundIterator{contract: _PaymentContract.contract, event: "Refund", logs: logs, sub: sub}, nil
}

// WatchRefund is a free log subscription operation binding the contract event 0xeb1f9c839f2c49a478bb26cfe5e3ef6caf398587b0191897965a82480e28d0df.
//
// Solidity: event Refund(string taskId, address to, uint256 amount)
func (_PaymentContract *PaymentContractFilterer) WatchRefund(opts *bind.WatchOpts, sink chan<- *PaymentContractRefund) (event.Subscription, error) {

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "Refund")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractRefund)
				if err := _PaymentContract.contract.UnpackLog(event, "Refund", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefund is a log parse operation binding the contract event 0xeb1f9c839f2c49a478bb26cfe5e3ef6caf398587b0191897965a82480e28d0df.
//
// Solidity: event Refund(string taskId, address to, uint256 amount)
func (_PaymentContract *PaymentContractFilterer) ParseRefund(log types.Log) (*PaymentContractRefund, error) {
	event := new(PaymentContractRefund)
	if err := _PaymentContract.contract.UnpackLog(event, "Refund", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the PaymentContract contract.
type PaymentContractUpgradedIterator struct {
	Event *PaymentContractUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractUpgraded represents a Upgraded event raised by the PaymentContract contract.
type PaymentContractUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PaymentContract *PaymentContractFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*PaymentContractUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &PaymentContractUpgradedIterator{contract: _PaymentContract.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PaymentContract *PaymentContractFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *PaymentContractUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractUpgraded)
				if err := _PaymentContract.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PaymentContract *PaymentContractFilterer) ParseUpgraded(log types.Log) (*PaymentContractUpgraded, error) {
	event := new(PaymentContractUpgraded)
	if err := _PaymentContract.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
