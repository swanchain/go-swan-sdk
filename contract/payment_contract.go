// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PaymentContractMetaData contains all meta data concerning the PaymentContract contract.
var PaymentContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hardwareId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hourlyRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"HardwareSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"taskId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"amountPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"hardwareIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"hourlyRates\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"active\",\"type\":\"bool[]\"}],\"name\":\"batchSetHardware\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaskManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hardwareInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pricePerHour\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"refundedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUuid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hardwareId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renewPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hardwareId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hourlyRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setHardware\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taskManager\",\"type\":\"address\"}],\"name\":\"setTaskManagerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newArWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUuid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hardwareId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"submitPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUuid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hardwareId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"submitPrivatePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b5061005261005760201b60201c565b6101f1565b600060019054906101000a900460ff16156100a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009e9061019a565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff16146101155760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff60405161010c91906101d6565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b6000610184602783610117565b915061018f82610128565b604082019050919050565b600060208201905081810360008301526101b381610177565b9050919050565b600060ff82169050919050565b6101d0816101ba565b82525050565b60006020820190506101eb60008301846101c7565b92915050565b608051614335610228600039600081816106a201528181610730015281816110d301528181611161015261121101526143356000f3fe6080604052600436106101805760003560e01c8063715018a6116100d1578063c4d66de81161008a578063e677334c11610064578063e677334c1461054a578063e94c893014610587578063f2fde38b146105b0578063ffb60719146105d957610180565b8063c4d66de8146104cf578063d365eb6c146104f8578063deaa59df1461052157610180565b8063715018a6146103d157806374e3d949146103e857806388bb45bb146104135780638da5cb5b1461043c578063a871a3e914610467578063a9996aed1461049057610180565b80633d8d04e01161013e57806352d1902d1161011857806352d1902d1461031557806354fd4d50146103405780636a326ab11461036b5780636e1e063f1461039457610180565b80633d8d04e0146102a75780634b0bddd2146102d05780634f1ef286146102f957610180565b806274f4091461018557806313299604146101c257806324d7806c146101ed5780633013ce291461022a5780633659cfe614610255578063396c889c1461027e575b600080fd5b34801561019157600080fd5b506101ac60048036038101906101a79190612a28565b610602565b6040516101b99190612a8a565b60405180910390f35b3480156101ce57600080fd5b506101d7610630565b6040516101e49190612ae6565b60405180910390f35b3480156101f957600080fd5b50610214600480360381019061020f9190612b2d565b61065a565b6040516102219190612b75565b60405180910390f35b34801561023657600080fd5b5061023f61067a565b60405161024c9190612bef565b60405180910390f35b34801561026157600080fd5b5061027c60048036038101906102779190612b2d565b6106a0565b005b34801561028a57600080fd5b506102a560048036038101906102a09190612c36565b610828565b005b3480156102b357600080fd5b506102ce60048036038101906102c99190612c36565b610c48565b005b3480156102dc57600080fd5b506102f760048036038101906102f29190612cd1565b61106e565b005b610313600480360381019061030e9190612db2565b6110d1565b005b34801561032157600080fd5b5061032a61120d565b6040516103379190612e27565b60405180910390f35b34801561034c57600080fd5b506103556112c6565b6040516103629190612a8a565b60405180910390f35b34801561037757600080fd5b50610392600480360381019061038d9190612b2d565b6112cf565b005b3480156103a057600080fd5b506103bb60048036038101906103b69190612b2d565b61131b565b6040516103c89190612a8a565b60405180910390f35b3480156103dd57600080fd5b506103e6611333565b005b3480156103f457600080fd5b506103fd611347565b60405161040a9190612ae6565b60405180910390f35b34801561041f57600080fd5b5061043a60048036038101906104359190612b2d565b611371565b005b34801561044857600080fd5b506104516113bd565b60405161045e9190612ae6565b60405180910390f35b34801561047357600080fd5b5061048e60048036038101906104899190612e42565b6113e7565b005b34801561049c57600080fd5b506104b760048036038101906104b29190612ec5565b6114a5565b6040516104c693929190612f71565b60405180910390f35b3480156104db57600080fd5b506104f660048036038101906104f19190612b2d565b611564565b005b34801561050457600080fd5b5061051f600480360381019061051a919061321b565b611744565b005b34801561052d57600080fd5b5061054860048036038101906105439190612b2d565b6118ec565b005b34801561055657600080fd5b50610571600480360381019061056c9190612a28565b6119bc565b60405161057e9190612a8a565b60405180910390f35b34801561059357600080fd5b506105ae60048036038101906105a99190612c36565b6119ea565b005b3480156105bc57600080fd5b506105d760048036038101906105d29190612b2d565b611d79565b005b3480156105e557600080fd5b5061060060048036038101906105fb91906132f2565b611dfc565b005b60ce818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b600060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60cb6020528060005260406000206000915054906101000a900460ff1681565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff160361072e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610725906133d3565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661076d6121c4565b73ffffffffffffffffffffffffffffffffffffffff16146107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90613465565b60405180910390fd5b6107cc8161221b565b61082581600067ffffffffffffffff8111156107eb576107ea6128fd565b5b6040519080825280601f01601f19166020018201604052801561081d5781602001600182028036833780820191505090505b506000612226565b50565b60cc600083815260200190815260200160002060020160009054906101000a900460ff1661088b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610882906134f7565b60405180910390fd5b6000610e108260cc6000868152602001908152602001600020600101546108b29190613546565b6108bc91906135b7565b90508060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161091a9190612ae6565b602060405180830381865afa158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b91906135fd565b101561099c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099390613676565b60405180910390fd5b8060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016109fa929190613696565b602060405180830381865afa158015610a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3b91906135fd565b1015610a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a739061370b565b60405180910390fd5b60cf60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b97f5b38584846040518463ffffffff1660e01b8152600401610adb9392919061372b565b600060405180830381600087803b158015610af557600080fd5b505af1158015610b09573d6000803e3d6000fd5b5050505060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3360ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401610b8e93929190613769565b6020604051808303816000875af1158015610bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd191906137b5565b508060cd85604051610be3919061381e565b90815260200160405180910390206000828254610c009190613835565b925050819055507fb5118c52291bb29d3c8e0b2bdc477f3ab93ffd496162843087d28d0a1e0b7b5e338583604051610c3a93929190613869565b60405180910390a150505050565b60cc600083815260200190815260200160002060020160009054906101000a900460ff16610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca2906134f7565b60405180910390fd5b600081610e106064608260cc600088815260200190815260200160002060010154610cd69190613546565b610ce091906135b7565b610cea91906135b7565b610cf49190613546565b90508060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610d529190612ae6565b602060405180830381865afa158015610d6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9391906135fd565b1015610dd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcb90613676565b60405180910390fd5b8060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610e32929190613696565b602060405180830381865afa158015610e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7391906135fd565b1015610eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eab9061370b565b60405180910390fd5b60cf60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b97f5b38584846040518463ffffffff1660e01b8152600401610f139392919061372b565b600060405180830381600087803b158015610f2d57600080fd5b505af1158015610f41573d6000803e3d6000fd5b5050505060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3360ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401610fc693929190613769565b6020604051808303816000875af1158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100991906137b5565b508060cd8560405161101b919061381e565b9081526020016040518091039020819055507fb5118c52291bb29d3c8e0b2bdc477f3ab93ffd496162843087d28d0a1e0b7b5e33858360405161106093929190613869565b60405180910390a150505050565b611076612394565b8060cb60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff160361115f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611156906133d3565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661119e6121c4565b73ffffffffffffffffffffffffffffffffffffffff16146111f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111eb90613465565b60405180910390fd5b6111fd8261221b565b61120982826001612226565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461129d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129490613919565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60006004905090565b6112d7612394565b8060c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60d06020528060005260406000206000915090505481565b61133b612394565b6113456000612412565b565b600060cf60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611379612394565b8060cf60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6113ef612394565b604051806060016040528084815260200183815260200182151581525060cc600086815260200190815260200160002060008201518160000190816114349190613b3b565b506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050507fbfbd7b99676dd49757a980378856e1d28c5c3fba3ab80ee007739fe1c87cac7b848484846040516114979493929190613c0d565b60405180910390a150505050565b60cc6020528060005260406000206000915090508060000180546114c890613968565b80601f01602080910402602001604051908101604052809291908181526020018280546114f490613968565b80156115415780601f1061151657610100808354040283529160200191611541565b820191906000526020600020905b81548152906001019060200180831161152457829003601f168201915b5050505050908060010154908060020160009054906101000a900460ff16905083565b60008060019054906101000a900460ff161590508080156115955750600160008054906101000a900460ff1660ff16105b806115c257506115a4306124d8565b1580156115c15750600160008054906101000a900460ff1660ff16145b5b611601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f890613ccb565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561163e576001600060016101000a81548160ff0219169083151502179055505b6116466124fb565b61164e612554565b8160c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160cb60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080156117405760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516117379190613d33565b60405180910390a15b5050565b61174c612394565b60005b84518110156118e557604051806060016040528085838151811061177657611775613d4e565b5b6020026020010151815260200184838151811061179657611795613d4e565b5b602002602001015181526020018383815181106117b6576117b5613d4e565b5b6020026020010151151581525060cc60008784815181106117da576117d9613d4e565b5b6020026020010151815260200190815260200160002060008201518160000190816118059190613b3b565b506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050507fbfbd7b99676dd49757a980378856e1d28c5c3fba3ab80ee007739fe1c87cac7b85828151811061186757611866613d4e565b5b602002602001015185838151811061188257611881613d4e565b5b602002602001015185848151811061189d5761189c613d4e565b5b60200260200101518585815181106118b8576118b7613d4e565b5b60200260200101516040516118d09493929190613c0d565b60405180910390a1808060010191505061174f565b5050505050565b60cb60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196f90613def565b60405180910390fd5b8060ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60cd818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60cc600083815260200190815260200160002060020160009054906101000a900460ff16611a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a44906134f7565b60405180910390fd5b6000610e108260cc600086815260200190815260200160002060010154611a749190613546565b611a7e91906135b7565b90508060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611adc9190612ae6565b602060405180830381865afa158015611af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1d91906135fd565b1015611b5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5590613676565b60405180910390fd5b8060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611bbc929190613696565b602060405180830381865afa158015611bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfd91906135fd565b1015611c3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c359061370b565b60405180910390fd5b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3360ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401611cbf93929190613769565b6020604051808303816000875af1158015611cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0291906137b5565b508060cd85604051611d14919061381e565b90815260200160405180910390206000828254611d319190613835565b925050819055507fb5118c52291bb29d3c8e0b2bdc477f3ab93ffd496162843087d28d0a1e0b7b5e338583604051611d6b93929190613869565b60405180910390a150505050565b611d81612394565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611df0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de790613e81565b60405180910390fd5b611df981612412565b50565b60cb60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611e88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7f90613def565b60405180910390fd5b8060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a0823160ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401611f069190612ae6565b602060405180830381865afa158015611f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4791906135fd565b1015611f88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7f90613676565b60405180910390fd5b8060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16306040518363ffffffff1660e01b8152600401612008929190613696565b602060405180830381865afa158015612025573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204991906135fd565b101561208a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120819061370b565b60405180910390fd5b8060ce8460405161209b919061381e565b908152602001604051809103902060008282546120b89190613835565b9250508190555060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846040518463ffffffff1660e01b815260040161214093929190613769565b6020604051808303816000875af115801561215f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218391906137b5565b507feb1f9c839f2c49a478bb26cfe5e3ef6caf398587b0191897965a82480e28d0df8383836040516121b793929190613ea1565b60405180910390a1505050565b60006121f27f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6125a5565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612223612394565b50565b6122527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b6125af565b60000160009054906101000a900460ff161561227657612271836125b9565b61238f565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156122de57506040513d601f19601f820116820180604052508101906122db9190613f0b565b60015b61231d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231490613faa565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114612382576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123799061403c565b60405180910390fd5b5061238e838383612672565b5b505050565b61239c61269e565b73ffffffffffffffffffffffffffffffffffffffff166123ba6113bd565b73ffffffffffffffffffffffffffffffffffffffff1614612410576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612407906140a8565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661254a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125419061413a565b60405180910390fd5b6125526126a6565b565b600060019054906101000a900460ff166125a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259a9061413a565b60405180910390fd5b565b6000819050919050565b6000819050919050565b6125c2816124d8565b612601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f8906141cc565b60405180910390fd5b8061262e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6125a5565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61267b83612707565b6000825111806126885750805b15612699576126978383612756565b505b505050565b600033905090565b600060019054906101000a900460ff166126f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ec9061413a565b60405180910390fd5b61270561270061269e565b612412565b565b612710816125b9565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b606061277b83836040518060600160405280602781526020016142d960279139612783565b905092915050565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516127ad9190614233565b600060405180830381855af49150503d80600081146127e8576040519150601f19603f3d011682016040523d82523d6000602084013e6127ed565b606091505b50915091506127fe86838387612809565b925050509392505050565b6060831561286b57600083510361286357612823856124d8565b612862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285990614296565b60405180910390fd5b5b829050612876565b612875838361287e565b5b949350505050565b6000825111156128915781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c591906142b6565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612935826128ec565b810181811067ffffffffffffffff82111715612954576129536128fd565b5b80604052505050565b60006129676128ce565b9050612973828261292c565b919050565b600067ffffffffffffffff821115612993576129926128fd565b5b61299c826128ec565b9050602081019050919050565b82818337600083830152505050565b60006129cb6129c684612978565b61295d565b9050828152602081018484840111156129e7576129e66128e7565b5b6129f28482856129a9565b509392505050565b600082601f830112612a0f57612a0e6128e2565b5b8135612a1f8482602086016129b8565b91505092915050565b600060208284031215612a3e57612a3d6128d8565b5b600082013567ffffffffffffffff811115612a5c57612a5b6128dd565b5b612a68848285016129fa565b91505092915050565b6000819050919050565b612a8481612a71565b82525050565b6000602082019050612a9f6000830184612a7b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ad082612aa5565b9050919050565b612ae081612ac5565b82525050565b6000602082019050612afb6000830184612ad7565b92915050565b612b0a81612ac5565b8114612b1557600080fd5b50565b600081359050612b2781612b01565b92915050565b600060208284031215612b4357612b426128d8565b5b6000612b5184828501612b18565b91505092915050565b60008115159050919050565b612b6f81612b5a565b82525050565b6000602082019050612b8a6000830184612b66565b92915050565b6000819050919050565b6000612bb5612bb0612bab84612aa5565b612b90565b612aa5565b9050919050565b6000612bc782612b9a565b9050919050565b6000612bd982612bbc565b9050919050565b612be981612bce565b82525050565b6000602082019050612c046000830184612be0565b92915050565b612c1381612a71565b8114612c1e57600080fd5b50565b600081359050612c3081612c0a565b92915050565b600080600060608486031215612c4f57612c4e6128d8565b5b600084013567ffffffffffffffff811115612c6d57612c6c6128dd565b5b612c79868287016129fa565b9350506020612c8a86828701612c21565b9250506040612c9b86828701612c21565b9150509250925092565b612cae81612b5a565b8114612cb957600080fd5b50565b600081359050612ccb81612ca5565b92915050565b60008060408385031215612ce857612ce76128d8565b5b6000612cf685828601612b18565b9250506020612d0785828601612cbc565b9150509250929050565b600067ffffffffffffffff821115612d2c57612d2b6128fd565b5b612d35826128ec565b9050602081019050919050565b6000612d55612d5084612d11565b61295d565b905082815260208101848484011115612d7157612d706128e7565b5b612d7c8482856129a9565b509392505050565b600082601f830112612d9957612d986128e2565b5b8135612da9848260208601612d42565b91505092915050565b60008060408385031215612dc957612dc86128d8565b5b6000612dd785828601612b18565b925050602083013567ffffffffffffffff811115612df857612df76128dd565b5b612e0485828601612d84565b9150509250929050565b6000819050919050565b612e2181612e0e565b82525050565b6000602082019050612e3c6000830184612e18565b92915050565b60008060008060808587031215612e5c57612e5b6128d8565b5b6000612e6a87828801612c21565b945050602085013567ffffffffffffffff811115612e8b57612e8a6128dd565b5b612e97878288016129fa565b9350506040612ea887828801612c21565b9250506060612eb987828801612cbc565b91505092959194509250565b600060208284031215612edb57612eda6128d8565b5b6000612ee984828501612c21565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f2c578082015181840152602081019050612f11565b60008484015250505050565b6000612f4382612ef2565b612f4d8185612efd565b9350612f5d818560208601612f0e565b612f66816128ec565b840191505092915050565b60006060820190508181036000830152612f8b8186612f38565b9050612f9a6020830185612a7b565b612fa76040830184612b66565b949350505050565b600067ffffffffffffffff821115612fca57612fc96128fd565b5b602082029050602081019050919050565b600080fd5b6000612ff3612fee84612faf565b61295d565b9050808382526020820190506020840283018581111561301657613015612fdb565b5b835b8181101561303f578061302b8882612c21565b845260208401935050602081019050613018565b5050509392505050565b600082601f83011261305e5761305d6128e2565b5b813561306e848260208601612fe0565b91505092915050565b600067ffffffffffffffff821115613092576130916128fd565b5b602082029050602081019050919050565b60006130b66130b184613077565b61295d565b905080838252602082019050602084028301858111156130d9576130d8612fdb565b5b835b8181101561312057803567ffffffffffffffff8111156130fe576130fd6128e2565b5b80860161310b89826129fa565b855260208501945050506020810190506130db565b5050509392505050565b600082601f83011261313f5761313e6128e2565b5b813561314f8482602086016130a3565b91505092915050565b600067ffffffffffffffff821115613173576131726128fd565b5b602082029050602081019050919050565b600061319761319284613158565b61295d565b905080838252602082019050602084028301858111156131ba576131b9612fdb565b5b835b818110156131e357806131cf8882612cbc565b8452602084019350506020810190506131bc565b5050509392505050565b600082601f830112613202576132016128e2565b5b8135613212848260208601613184565b91505092915050565b60008060008060808587031215613235576132346128d8565b5b600085013567ffffffffffffffff811115613253576132526128dd565b5b61325f87828801613049565b945050602085013567ffffffffffffffff8111156132805761327f6128dd565b5b61328c8782880161312a565b935050604085013567ffffffffffffffff8111156132ad576132ac6128dd565b5b6132b987828801613049565b925050606085013567ffffffffffffffff8111156132da576132d96128dd565b5b6132e6878288016131ed565b91505092959194509250565b60008060006060848603121561330b5761330a6128d8565b5b600084013567ffffffffffffffff811115613329576133286128dd565b5b613335868287016129fa565b935050602061334686828701612b18565b925050604061335786828701612c21565b9150509250925092565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b60006133bd602c83612efd565b91506133c882613361565b604082019050919050565b600060208201905081810360008301526133ec816133b0565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b600061344f602c83612efd565b915061345a826133f3565b604082019050919050565b6000602082019050818103600083015261347e81613442565b9050919050565b7f526571756573746564206861726477617265206973206e6f7420737570706f7260008201527f7465642e00000000000000000000000000000000000000000000000000000000602082015250565b60006134e1602483612efd565b91506134ec82613485565b604082019050919050565b60006020820190508181036000830152613510816134d4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061355182612a71565b915061355c83612a71565b925082820261356a81612a71565b9150828204841483151761358157613580613517565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006135c282612a71565b91506135cd83612a71565b9250826135dd576135dc613588565b5b828204905092915050565b6000815190506135f781612c0a565b92915050565b600060208284031215613613576136126128d8565b5b6000613621848285016135e8565b91505092915050565b7f496e73756666696369656e742066756e64732e00000000000000000000000000600082015250565b6000613660601383612efd565b915061366b8261362a565b602082019050919050565b6000602082019050818103600083015261368f81613653565b9050919050565b60006040820190506136ab6000830185612ad7565b6136b86020830184612ad7565b9392505050565b7f417070726f7665207370656e64696e672066756e64732e000000000000000000600082015250565b60006136f5601783612efd565b9150613700826136bf565b602082019050919050565b60006020820190508181036000830152613724816136e8565b9050919050565b600060608201905081810360008301526137458186612f38565b90506137546020830185612a7b565b6137616040830184612a7b565b949350505050565b600060608201905061377e6000830186612ad7565b61378b6020830185612ad7565b6137986040830184612a7b565b949350505050565b6000815190506137af81612ca5565b92915050565b6000602082840312156137cb576137ca6128d8565b5b60006137d9848285016137a0565b91505092915050565b600081905092915050565b60006137f882612ef2565b61380281856137e2565b9350613812818560208601612f0e565b80840191505092915050565b600061382a82846137ed565b915081905092915050565b600061384082612a71565b915061384b83612a71565b925082820190508082111561386357613862613517565b5b92915050565b600060608201905061387e6000830186612ad7565b81810360208301526138908185612f38565b905061389f6040830184612a7b565b949350505050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000613903603883612efd565b915061390e826138a7565b604082019050919050565b60006020820190508181036000830152613932816138f6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061398057607f821691505b60208210810361399357613992613939565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026139fb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826139be565b613a0586836139be565b95508019841693508086168417925050509392505050565b6000613a38613a33613a2e84612a71565b612b90565b612a71565b9050919050565b6000819050919050565b613a5283613a1d565b613a66613a5e82613a3f565b8484546139cb565b825550505050565b600090565b613a7b613a6e565b613a86818484613a49565b505050565b5b81811015613aaa57613a9f600082613a73565b600181019050613a8c565b5050565b601f821115613aef57613ac081613999565b613ac9846139ae565b81016020851015613ad8578190505b613aec613ae4856139ae565b830182613a8b565b50505b505050565b600082821c905092915050565b6000613b1260001984600802613af4565b1980831691505092915050565b6000613b2b8383613b01565b9150826002028217905092915050565b613b4482612ef2565b67ffffffffffffffff811115613b5d57613b5c6128fd565b5b613b678254613968565b613b72828285613aae565b600060209050601f831160018114613ba55760008415613b93578287015190505b613b9d8582613b1f565b865550613c05565b601f198416613bb386613999565b60005b82811015613bdb57848901518255600182019150602085019450602081019050613bb6565b86831015613bf85784890151613bf4601f891682613b01565b8355505b6001600288020188555050505b505050505050565b6000608082019050613c226000830187612a7b565b8181036020830152613c348186612f38565b9050613c436040830185612a7b565b613c506060830184612b66565b95945050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613cb5602e83612efd565b9150613cc082613c59565b604082019050919050565b60006020820190508181036000830152613ce481613ca8565b9050919050565b6000819050919050565b600060ff82169050919050565b6000613d1d613d18613d1384613ceb565b612b90565b613cf5565b9050919050565b613d2d81613d02565b82525050565b6000602082019050613d486000830184613d24565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f6e6c79207468652061646d696e2063616e2063616c6c20746869732066756e60008201527f6374696f6e2e0000000000000000000000000000000000000000000000000000602082015250565b6000613dd9602683612efd565b9150613de482613d7d565b604082019050919050565b60006020820190508181036000830152613e0881613dcc565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613e6b602683612efd565b9150613e7682613e0f565b604082019050919050565b60006020820190508181036000830152613e9a81613e5e565b9050919050565b60006060820190508181036000830152613ebb8186612f38565b9050613eca6020830185612ad7565b613ed76040830184612a7b565b949350505050565b613ee881612e0e565b8114613ef357600080fd5b50565b600081519050613f0581613edf565b92915050565b600060208284031215613f2157613f206128d8565b5b6000613f2f84828501613ef6565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000613f94602e83612efd565b9150613f9f82613f38565b604082019050919050565b60006020820190508181036000830152613fc381613f87565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000614026602983612efd565b915061403182613fca565b604082019050919050565b6000602082019050818103600083015261405581614019565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614092602083612efd565b915061409d8261405c565b602082019050919050565b600060208201905081810360008301526140c181614085565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614124602b83612efd565b915061412f826140c8565b604082019050919050565b6000602082019050818103600083015261415381614117565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006141b6602d83612efd565b91506141c18261415a565b604082019050919050565b600060208201905081810360008301526141e5816141a9565b9050919050565b600081519050919050565b600081905092915050565b600061420d826141ec565b61421781856141f7565b9350614227818560208601612f0e565b80840191505092915050565b600061423f8284614202565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614280601d83612efd565b915061428b8261424a565b602082019050919050565b600060208201905081810360008301526142af81614273565b9050919050565b600060208201905081810360008301526142d08184612f38565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b7bed12ada341fece499d235e0fac8780561ac3a6191df4bd9472df49bc6b70164736f6c63430008190033",
}

// PaymentContractABI is the input ABI used to generate the binding from.
// Deprecated: Use PaymentContractMetaData.ABI instead.
var PaymentContractABI = PaymentContractMetaData.ABI

// PaymentContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PaymentContractMetaData.Bin instead.
var PaymentContractBin = PaymentContractMetaData.Bin

// DeployPaymentContract deploys a new Ethereum contract, binding an instance of PaymentContract to it.
func DeployPaymentContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PaymentContract, error) {
	parsed, err := PaymentContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PaymentContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PaymentContract{PaymentContractCaller: PaymentContractCaller{contract: contract}, PaymentContractTransactor: PaymentContractTransactor{contract: contract}, PaymentContractFilterer: PaymentContractFilterer{contract: contract}}, nil
}

// PaymentContract is an auto generated Go binding around an Ethereum contract.
type PaymentContract struct {
	PaymentContractCaller     // Read-only binding to the contract
	PaymentContractTransactor // Write-only binding to the contract
	PaymentContractFilterer   // Log filterer for contract events
}

// PaymentContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type PaymentContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaymentContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PaymentContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaymentContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PaymentContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PaymentContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PaymentContractSession struct {
	Contract     *PaymentContract  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PaymentContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PaymentContractCallerSession struct {
	Contract *PaymentContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// PaymentContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PaymentContractTransactorSession struct {
	Contract     *PaymentContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// PaymentContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type PaymentContractRaw struct {
	Contract *PaymentContract // Generic contract binding to access the raw methods on
}

// PaymentContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PaymentContractCallerRaw struct {
	Contract *PaymentContractCaller // Generic read-only contract binding to access the raw methods on
}

// PaymentContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PaymentContractTransactorRaw struct {
	Contract *PaymentContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPaymentContract creates a new instance of PaymentContract, bound to a specific deployed contract.
func NewPaymentContract(address common.Address, backend bind.ContractBackend) (*PaymentContract, error) {
	contract, err := bindPaymentContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PaymentContract{PaymentContractCaller: PaymentContractCaller{contract: contract}, PaymentContractTransactor: PaymentContractTransactor{contract: contract}, PaymentContractFilterer: PaymentContractFilterer{contract: contract}}, nil
}

// NewPaymentContractCaller creates a new read-only instance of PaymentContract, bound to a specific deployed contract.
func NewPaymentContractCaller(address common.Address, caller bind.ContractCaller) (*PaymentContractCaller, error) {
	contract, err := bindPaymentContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PaymentContractCaller{contract: contract}, nil
}

// NewPaymentContractTransactor creates a new write-only instance of PaymentContract, bound to a specific deployed contract.
func NewPaymentContractTransactor(address common.Address, transactor bind.ContractTransactor) (*PaymentContractTransactor, error) {
	contract, err := bindPaymentContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PaymentContractTransactor{contract: contract}, nil
}

// NewPaymentContractFilterer creates a new log filterer instance of PaymentContract, bound to a specific deployed contract.
func NewPaymentContractFilterer(address common.Address, filterer bind.ContractFilterer) (*PaymentContractFilterer, error) {
	contract, err := bindPaymentContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PaymentContractFilterer{contract: contract}, nil
}

// bindPaymentContract binds a generic wrapper to an already deployed contract.
func bindPaymentContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PaymentContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PaymentContract *PaymentContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PaymentContract.Contract.PaymentContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PaymentContract *PaymentContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaymentContract.Contract.PaymentContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PaymentContract *PaymentContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PaymentContract.Contract.PaymentContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PaymentContract *PaymentContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PaymentContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PaymentContract *PaymentContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaymentContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PaymentContract *PaymentContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PaymentContract.Contract.contract.Transact(opts, method, params...)
}

// AmountPaid is a free data retrieval call binding the contract method 0xe677334c.
//
// Solidity: function amountPaid(string ) view returns(uint256)
func (_PaymentContract *PaymentContractCaller) AmountPaid(opts *bind.CallOpts, arg0 string) (*big.Int, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "amountPaid", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountPaid is a free data retrieval call binding the contract method 0xe677334c.
//
// Solidity: function amountPaid(string ) view returns(uint256)
func (_PaymentContract *PaymentContractSession) AmountPaid(arg0 string) (*big.Int, error) {
	return _PaymentContract.Contract.AmountPaid(&_PaymentContract.CallOpts, arg0)
}

// AmountPaid is a free data retrieval call binding the contract method 0xe677334c.
//
// Solidity: function amountPaid(string ) view returns(uint256)
func (_PaymentContract *PaymentContractCallerSession) AmountPaid(arg0 string) (*big.Int, error) {
	return _PaymentContract.Contract.AmountPaid(&_PaymentContract.CallOpts, arg0)
}

// ClaimableRefund is a free data retrieval call binding the contract method 0x6e1e063f.
//
// Solidity: function claimableRefund(address ) view returns(uint256)
func (_PaymentContract *PaymentContractCaller) ClaimableRefund(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "claimableRefund", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimableRefund is a free data retrieval call binding the contract method 0x6e1e063f.
//
// Solidity: function claimableRefund(address ) view returns(uint256)
func (_PaymentContract *PaymentContractSession) ClaimableRefund(arg0 common.Address) (*big.Int, error) {
	return _PaymentContract.Contract.ClaimableRefund(&_PaymentContract.CallOpts, arg0)
}

// ClaimableRefund is a free data retrieval call binding the contract method 0x6e1e063f.
//
// Solidity: function claimableRefund(address ) view returns(uint256)
func (_PaymentContract *PaymentContractCallerSession) ClaimableRefund(arg0 common.Address) (*big.Int, error) {
	return _PaymentContract.Contract.ClaimableRefund(&_PaymentContract.CallOpts, arg0)
}

// GetTaskManager is a free data retrieval call binding the contract method 0x74e3d949.
//
// Solidity: function getTaskManager() view returns(address)
func (_PaymentContract *PaymentContractCaller) GetTaskManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "getTaskManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetTaskManager is a free data retrieval call binding the contract method 0x74e3d949.
//
// Solidity: function getTaskManager() view returns(address)
func (_PaymentContract *PaymentContractSession) GetTaskManager() (common.Address, error) {
	return _PaymentContract.Contract.GetTaskManager(&_PaymentContract.CallOpts)
}

// GetTaskManager is a free data retrieval call binding the contract method 0x74e3d949.
//
// Solidity: function getTaskManager() view returns(address)
func (_PaymentContract *PaymentContractCallerSession) GetTaskManager() (common.Address, error) {
	return _PaymentContract.Contract.GetTaskManager(&_PaymentContract.CallOpts)
}

// GetWallet is a free data retrieval call binding the contract method 0x13299604.
//
// Solidity: function getWallet() view returns(address)
func (_PaymentContract *PaymentContractCaller) GetWallet(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "getWallet")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetWallet is a free data retrieval call binding the contract method 0x13299604.
//
// Solidity: function getWallet() view returns(address)
func (_PaymentContract *PaymentContractSession) GetWallet() (common.Address, error) {
	return _PaymentContract.Contract.GetWallet(&_PaymentContract.CallOpts)
}

// GetWallet is a free data retrieval call binding the contract method 0x13299604.
//
// Solidity: function getWallet() view returns(address)
func (_PaymentContract *PaymentContractCallerSession) GetWallet() (common.Address, error) {
	return _PaymentContract.Contract.GetWallet(&_PaymentContract.CallOpts)
}

// HardwareInfo is a free data retrieval call binding the contract method 0xa9996aed.
//
// Solidity: function hardwareInfo(uint256 ) view returns(string name, uint256 pricePerHour, bool isActive)
func (_PaymentContract *PaymentContractCaller) HardwareInfo(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Name         string
	PricePerHour *big.Int
	IsActive     bool
}, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "hardwareInfo", arg0)

	outstruct := new(struct {
		Name         string
		PricePerHour *big.Int
		IsActive     bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.PricePerHour = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.IsActive = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// HardwareInfo is a free data retrieval call binding the contract method 0xa9996aed.
//
// Solidity: function hardwareInfo(uint256 ) view returns(string name, uint256 pricePerHour, bool isActive)
func (_PaymentContract *PaymentContractSession) HardwareInfo(arg0 *big.Int) (struct {
	Name         string
	PricePerHour *big.Int
	IsActive     bool
}, error) {
	return _PaymentContract.Contract.HardwareInfo(&_PaymentContract.CallOpts, arg0)
}

// HardwareInfo is a free data retrieval call binding the contract method 0xa9996aed.
//
// Solidity: function hardwareInfo(uint256 ) view returns(string name, uint256 pricePerHour, bool isActive)
func (_PaymentContract *PaymentContractCallerSession) HardwareInfo(arg0 *big.Int) (struct {
	Name         string
	PricePerHour *big.Int
	IsActive     bool
}, error) {
	return _PaymentContract.Contract.HardwareInfo(&_PaymentContract.CallOpts, arg0)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_PaymentContract *PaymentContractCaller) IsAdmin(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "isAdmin", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_PaymentContract *PaymentContractSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _PaymentContract.Contract.IsAdmin(&_PaymentContract.CallOpts, arg0)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_PaymentContract *PaymentContractCallerSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _PaymentContract.Contract.IsAdmin(&_PaymentContract.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaymentContract *PaymentContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaymentContract *PaymentContractSession) Owner() (common.Address, error) {
	return _PaymentContract.Contract.Owner(&_PaymentContract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PaymentContract *PaymentContractCallerSession) Owner() (common.Address, error) {
	return _PaymentContract.Contract.Owner(&_PaymentContract.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_PaymentContract *PaymentContractCaller) PaymentToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "paymentToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_PaymentContract *PaymentContractSession) PaymentToken() (common.Address, error) {
	return _PaymentContract.Contract.PaymentToken(&_PaymentContract.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_PaymentContract *PaymentContractCallerSession) PaymentToken() (common.Address, error) {
	return _PaymentContract.Contract.PaymentToken(&_PaymentContract.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_PaymentContract *PaymentContractCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_PaymentContract *PaymentContractSession) ProxiableUUID() ([32]byte, error) {
	return _PaymentContract.Contract.ProxiableUUID(&_PaymentContract.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_PaymentContract *PaymentContractCallerSession) ProxiableUUID() ([32]byte, error) {
	return _PaymentContract.Contract.ProxiableUUID(&_PaymentContract.CallOpts)
}

// RefundedAmount is a free data retrieval call binding the contract method 0x0074f409.
//
// Solidity: function refundedAmount(string ) view returns(uint256)
func (_PaymentContract *PaymentContractCaller) RefundedAmount(opts *bind.CallOpts, arg0 string) (*big.Int, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "refundedAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RefundedAmount is a free data retrieval call binding the contract method 0x0074f409.
//
// Solidity: function refundedAmount(string ) view returns(uint256)
func (_PaymentContract *PaymentContractSession) RefundedAmount(arg0 string) (*big.Int, error) {
	return _PaymentContract.Contract.RefundedAmount(&_PaymentContract.CallOpts, arg0)
}

// RefundedAmount is a free data retrieval call binding the contract method 0x0074f409.
//
// Solidity: function refundedAmount(string ) view returns(uint256)
func (_PaymentContract *PaymentContractCallerSession) RefundedAmount(arg0 string) (*big.Int, error) {
	return _PaymentContract.Contract.RefundedAmount(&_PaymentContract.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_PaymentContract *PaymentContractCaller) Version(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PaymentContract.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_PaymentContract *PaymentContractSession) Version() (*big.Int, error) {
	return _PaymentContract.Contract.Version(&_PaymentContract.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_PaymentContract *PaymentContractCallerSession) Version() (*big.Int, error) {
	return _PaymentContract.Contract.Version(&_PaymentContract.CallOpts)
}

// BatchSetHardware is a paid mutator transaction binding the contract method 0xd365eb6c.
//
// Solidity: function batchSetHardware(uint256[] hardwareIds, string[] names, uint256[] hourlyRates, bool[] active) returns()
func (_PaymentContract *PaymentContractTransactor) BatchSetHardware(opts *bind.TransactOpts, hardwareIds []*big.Int, names []string, hourlyRates []*big.Int, active []bool) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "batchSetHardware", hardwareIds, names, hourlyRates, active)
}

// BatchSetHardware is a paid mutator transaction binding the contract method 0xd365eb6c.
//
// Solidity: function batchSetHardware(uint256[] hardwareIds, string[] names, uint256[] hourlyRates, bool[] active) returns()
func (_PaymentContract *PaymentContractSession) BatchSetHardware(hardwareIds []*big.Int, names []string, hourlyRates []*big.Int, active []bool) (*types.Transaction, error) {
	return _PaymentContract.Contract.BatchSetHardware(&_PaymentContract.TransactOpts, hardwareIds, names, hourlyRates, active)
}

// BatchSetHardware is a paid mutator transaction binding the contract method 0xd365eb6c.
//
// Solidity: function batchSetHardware(uint256[] hardwareIds, string[] names, uint256[] hourlyRates, bool[] active) returns()
func (_PaymentContract *PaymentContractTransactorSession) BatchSetHardware(hardwareIds []*big.Int, names []string, hourlyRates []*big.Int, active []bool) (*types.Transaction, error) {
	return _PaymentContract.Contract.BatchSetHardware(&_PaymentContract.TransactOpts, hardwareIds, names, hourlyRates, active)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address inToken) returns()
func (_PaymentContract *PaymentContractTransactor) Initialize(opts *bind.TransactOpts, inToken common.Address) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "initialize", inToken)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address inToken) returns()
func (_PaymentContract *PaymentContractSession) Initialize(inToken common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.Initialize(&_PaymentContract.TransactOpts, inToken)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address inToken) returns()
func (_PaymentContract *PaymentContractTransactorSession) Initialize(inToken common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.Initialize(&_PaymentContract.TransactOpts, inToken)
}

// RenewPayment is a paid mutator transaction binding the contract method 0x396c889c.
//
// Solidity: function renewPayment(string taskUuid, uint256 hardwareId, uint256 duration) returns()
func (_PaymentContract *PaymentContractTransactor) RenewPayment(opts *bind.TransactOpts, taskUuid string, hardwareId *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "renewPayment", taskUuid, hardwareId, duration)
}

// RenewPayment is a paid mutator transaction binding the contract method 0x396c889c.
//
// Solidity: function renewPayment(string taskUuid, uint256 hardwareId, uint256 duration) returns()
func (_PaymentContract *PaymentContractSession) RenewPayment(taskUuid string, hardwareId *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _PaymentContract.Contract.RenewPayment(&_PaymentContract.TransactOpts, taskUuid, hardwareId, duration)
}

// RenewPayment is a paid mutator transaction binding the contract method 0x396c889c.
//
// Solidity: function renewPayment(string taskUuid, uint256 hardwareId, uint256 duration) returns()
func (_PaymentContract *PaymentContractTransactorSession) RenewPayment(taskUuid string, hardwareId *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _PaymentContract.Contract.RenewPayment(&_PaymentContract.TransactOpts, taskUuid, hardwareId, duration)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaymentContract *PaymentContractTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaymentContract *PaymentContractSession) RenounceOwnership() (*types.Transaction, error) {
	return _PaymentContract.Contract.RenounceOwnership(&_PaymentContract.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PaymentContract *PaymentContractTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PaymentContract.Contract.RenounceOwnership(&_PaymentContract.TransactOpts)
}

// SendRefund is a paid mutator transaction binding the contract method 0xffb60719.
//
// Solidity: function sendRefund(string taskId, address user, uint256 amount) returns()
func (_PaymentContract *PaymentContractTransactor) SendRefund(opts *bind.TransactOpts, taskId string, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "sendRefund", taskId, user, amount)
}

// SendRefund is a paid mutator transaction binding the contract method 0xffb60719.
//
// Solidity: function sendRefund(string taskId, address user, uint256 amount) returns()
func (_PaymentContract *PaymentContractSession) SendRefund(taskId string, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PaymentContract.Contract.SendRefund(&_PaymentContract.TransactOpts, taskId, user, amount)
}

// SendRefund is a paid mutator transaction binding the contract method 0xffb60719.
//
// Solidity: function sendRefund(string taskId, address user, uint256 amount) returns()
func (_PaymentContract *PaymentContractTransactorSession) SendRefund(taskId string, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PaymentContract.Contract.SendRefund(&_PaymentContract.TransactOpts, taskId, user, amount)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x4b0bddd2.
//
// Solidity: function setAdmin(address admin, bool status) returns()
func (_PaymentContract *PaymentContractTransactor) SetAdmin(opts *bind.TransactOpts, admin common.Address, status bool) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "setAdmin", admin, status)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x4b0bddd2.
//
// Solidity: function setAdmin(address admin, bool status) returns()
func (_PaymentContract *PaymentContractSession) SetAdmin(admin common.Address, status bool) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetAdmin(&_PaymentContract.TransactOpts, admin, status)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x4b0bddd2.
//
// Solidity: function setAdmin(address admin, bool status) returns()
func (_PaymentContract *PaymentContractTransactorSession) SetAdmin(admin common.Address, status bool) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetAdmin(&_PaymentContract.TransactOpts, admin, status)
}

// SetHardware is a paid mutator transaction binding the contract method 0xa871a3e9.
//
// Solidity: function setHardware(uint256 hardwareId, string name, uint256 hourlyRate, bool active) returns()
func (_PaymentContract *PaymentContractTransactor) SetHardware(opts *bind.TransactOpts, hardwareId *big.Int, name string, hourlyRate *big.Int, active bool) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "setHardware", hardwareId, name, hourlyRate, active)
}

// SetHardware is a paid mutator transaction binding the contract method 0xa871a3e9.
//
// Solidity: function setHardware(uint256 hardwareId, string name, uint256 hourlyRate, bool active) returns()
func (_PaymentContract *PaymentContractSession) SetHardware(hardwareId *big.Int, name string, hourlyRate *big.Int, active bool) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetHardware(&_PaymentContract.TransactOpts, hardwareId, name, hourlyRate, active)
}

// SetHardware is a paid mutator transaction binding the contract method 0xa871a3e9.
//
// Solidity: function setHardware(uint256 hardwareId, string name, uint256 hourlyRate, bool active) returns()
func (_PaymentContract *PaymentContractTransactorSession) SetHardware(hardwareId *big.Int, name string, hourlyRate *big.Int, active bool) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetHardware(&_PaymentContract.TransactOpts, hardwareId, name, hourlyRate, active)
}

// SetPaymentToken is a paid mutator transaction binding the contract method 0x6a326ab1.
//
// Solidity: function setPaymentToken(address token) returns()
func (_PaymentContract *PaymentContractTransactor) SetPaymentToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "setPaymentToken", token)
}

// SetPaymentToken is a paid mutator transaction binding the contract method 0x6a326ab1.
//
// Solidity: function setPaymentToken(address token) returns()
func (_PaymentContract *PaymentContractSession) SetPaymentToken(token common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetPaymentToken(&_PaymentContract.TransactOpts, token)
}

// SetPaymentToken is a paid mutator transaction binding the contract method 0x6a326ab1.
//
// Solidity: function setPaymentToken(address token) returns()
func (_PaymentContract *PaymentContractTransactorSession) SetPaymentToken(token common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetPaymentToken(&_PaymentContract.TransactOpts, token)
}

// SetTaskManagerAddress is a paid mutator transaction binding the contract method 0x88bb45bb.
//
// Solidity: function setTaskManagerAddress(address taskManager) returns()
func (_PaymentContract *PaymentContractTransactor) SetTaskManagerAddress(opts *bind.TransactOpts, taskManager common.Address) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "setTaskManagerAddress", taskManager)
}

// SetTaskManagerAddress is a paid mutator transaction binding the contract method 0x88bb45bb.
//
// Solidity: function setTaskManagerAddress(address taskManager) returns()
func (_PaymentContract *PaymentContractSession) SetTaskManagerAddress(taskManager common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetTaskManagerAddress(&_PaymentContract.TransactOpts, taskManager)
}

// SetTaskManagerAddress is a paid mutator transaction binding the contract method 0x88bb45bb.
//
// Solidity: function setTaskManagerAddress(address taskManager) returns()
func (_PaymentContract *PaymentContractTransactorSession) SetTaskManagerAddress(taskManager common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetTaskManagerAddress(&_PaymentContract.TransactOpts, taskManager)
}

// SetWallet is a paid mutator transaction binding the contract method 0xdeaa59df.
//
// Solidity: function setWallet(address newArWallet) returns()
func (_PaymentContract *PaymentContractTransactor) SetWallet(opts *bind.TransactOpts, newArWallet common.Address) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "setWallet", newArWallet)
}

// SetWallet is a paid mutator transaction binding the contract method 0xdeaa59df.
//
// Solidity: function setWallet(address newArWallet) returns()
func (_PaymentContract *PaymentContractSession) SetWallet(newArWallet common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetWallet(&_PaymentContract.TransactOpts, newArWallet)
}

// SetWallet is a paid mutator transaction binding the contract method 0xdeaa59df.
//
// Solidity: function setWallet(address newArWallet) returns()
func (_PaymentContract *PaymentContractTransactorSession) SetWallet(newArWallet common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.SetWallet(&_PaymentContract.TransactOpts, newArWallet)
}

// SubmitPayment is a paid mutator transaction binding the contract method 0xe94c8930.
//
// Solidity: function submitPayment(string taskUuid, uint256 hardwareId, uint256 duration) returns()
func (_PaymentContract *PaymentContractTransactor) SubmitPayment(opts *bind.TransactOpts, taskUuid string, hardwareId *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "submitPayment", taskUuid, hardwareId, duration)
}

// SubmitPayment is a paid mutator transaction binding the contract method 0xe94c8930.
//
// Solidity: function submitPayment(string taskUuid, uint256 hardwareId, uint256 duration) returns()
func (_PaymentContract *PaymentContractSession) SubmitPayment(taskUuid string, hardwareId *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _PaymentContract.Contract.SubmitPayment(&_PaymentContract.TransactOpts, taskUuid, hardwareId, duration)
}

// SubmitPayment is a paid mutator transaction binding the contract method 0xe94c8930.
//
// Solidity: function submitPayment(string taskUuid, uint256 hardwareId, uint256 duration) returns()
func (_PaymentContract *PaymentContractTransactorSession) SubmitPayment(taskUuid string, hardwareId *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _PaymentContract.Contract.SubmitPayment(&_PaymentContract.TransactOpts, taskUuid, hardwareId, duration)
}

// SubmitPrivatePayment is a paid mutator transaction binding the contract method 0x3d8d04e0.
//
// Solidity: function submitPrivatePayment(string taskUuid, uint256 hardwareId, uint256 duration) returns()
func (_PaymentContract *PaymentContractTransactor) SubmitPrivatePayment(opts *bind.TransactOpts, taskUuid string, hardwareId *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "submitPrivatePayment", taskUuid, hardwareId, duration)
}

// SubmitPrivatePayment is a paid mutator transaction binding the contract method 0x3d8d04e0.
//
// Solidity: function submitPrivatePayment(string taskUuid, uint256 hardwareId, uint256 duration) returns()
func (_PaymentContract *PaymentContractSession) SubmitPrivatePayment(taskUuid string, hardwareId *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _PaymentContract.Contract.SubmitPrivatePayment(&_PaymentContract.TransactOpts, taskUuid, hardwareId, duration)
}

// SubmitPrivatePayment is a paid mutator transaction binding the contract method 0x3d8d04e0.
//
// Solidity: function submitPrivatePayment(string taskUuid, uint256 hardwareId, uint256 duration) returns()
func (_PaymentContract *PaymentContractTransactorSession) SubmitPrivatePayment(taskUuid string, hardwareId *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _PaymentContract.Contract.SubmitPrivatePayment(&_PaymentContract.TransactOpts, taskUuid, hardwareId, duration)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaymentContract *PaymentContractTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaymentContract *PaymentContractSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.TransferOwnership(&_PaymentContract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PaymentContract *PaymentContractTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.TransferOwnership(&_PaymentContract.TransactOpts, newOwner)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_PaymentContract *PaymentContractTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_PaymentContract *PaymentContractSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.UpgradeTo(&_PaymentContract.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_PaymentContract *PaymentContractTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _PaymentContract.Contract.UpgradeTo(&_PaymentContract.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_PaymentContract *PaymentContractTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _PaymentContract.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_PaymentContract *PaymentContractSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _PaymentContract.Contract.UpgradeToAndCall(&_PaymentContract.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_PaymentContract *PaymentContractTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _PaymentContract.Contract.UpgradeToAndCall(&_PaymentContract.TransactOpts, newImplementation, data)
}

// PaymentContractAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the PaymentContract contract.
type PaymentContractAdminChangedIterator struct {
	Event *PaymentContractAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractAdminChanged represents a AdminChanged event raised by the PaymentContract contract.
type PaymentContractAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_PaymentContract *PaymentContractFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*PaymentContractAdminChangedIterator, error) {

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &PaymentContractAdminChangedIterator{contract: _PaymentContract.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_PaymentContract *PaymentContractFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *PaymentContractAdminChanged) (event.Subscription, error) {

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractAdminChanged)
				if err := _PaymentContract.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_PaymentContract *PaymentContractFilterer) ParseAdminChanged(log types.Log) (*PaymentContractAdminChanged, error) {
	event := new(PaymentContractAdminChanged)
	if err := _PaymentContract.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the PaymentContract contract.
type PaymentContractBeaconUpgradedIterator struct {
	Event *PaymentContractBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractBeaconUpgraded represents a BeaconUpgraded event raised by the PaymentContract contract.
type PaymentContractBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_PaymentContract *PaymentContractFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*PaymentContractBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &PaymentContractBeaconUpgradedIterator{contract: _PaymentContract.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_PaymentContract *PaymentContractFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *PaymentContractBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractBeaconUpgraded)
				if err := _PaymentContract.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_PaymentContract *PaymentContractFilterer) ParseBeaconUpgraded(log types.Log) (*PaymentContractBeaconUpgraded, error) {
	event := new(PaymentContractBeaconUpgraded)
	if err := _PaymentContract.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractHardwareSetIterator is returned from FilterHardwareSet and is used to iterate over the raw logs and unpacked data for HardwareSet events raised by the PaymentContract contract.
type PaymentContractHardwareSetIterator struct {
	Event *PaymentContractHardwareSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractHardwareSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractHardwareSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractHardwareSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractHardwareSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractHardwareSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractHardwareSet represents a HardwareSet event raised by the PaymentContract contract.
type PaymentContractHardwareSet struct {
	HardwareId *big.Int
	Name       string
	HourlyRate *big.Int
	Active     bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterHardwareSet is a free log retrieval operation binding the contract event 0xbfbd7b99676dd49757a980378856e1d28c5c3fba3ab80ee007739fe1c87cac7b.
//
// Solidity: event HardwareSet(uint256 hardwareId, string name, uint256 hourlyRate, bool active)
func (_PaymentContract *PaymentContractFilterer) FilterHardwareSet(opts *bind.FilterOpts) (*PaymentContractHardwareSetIterator, error) {

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "HardwareSet")
	if err != nil {
		return nil, err
	}
	return &PaymentContractHardwareSetIterator{contract: _PaymentContract.contract, event: "HardwareSet", logs: logs, sub: sub}, nil
}

// WatchHardwareSet is a free log subscription operation binding the contract event 0xbfbd7b99676dd49757a980378856e1d28c5c3fba3ab80ee007739fe1c87cac7b.
//
// Solidity: event HardwareSet(uint256 hardwareId, string name, uint256 hourlyRate, bool active)
func (_PaymentContract *PaymentContractFilterer) WatchHardwareSet(opts *bind.WatchOpts, sink chan<- *PaymentContractHardwareSet) (event.Subscription, error) {

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "HardwareSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractHardwareSet)
				if err := _PaymentContract.contract.UnpackLog(event, "HardwareSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHardwareSet is a log parse operation binding the contract event 0xbfbd7b99676dd49757a980378856e1d28c5c3fba3ab80ee007739fe1c87cac7b.
//
// Solidity: event HardwareSet(uint256 hardwareId, string name, uint256 hourlyRate, bool active)
func (_PaymentContract *PaymentContractFilterer) ParseHardwareSet(log types.Log) (*PaymentContractHardwareSet, error) {
	event := new(PaymentContractHardwareSet)
	if err := _PaymentContract.contract.UnpackLog(event, "HardwareSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the PaymentContract contract.
type PaymentContractInitializedIterator struct {
	Event *PaymentContractInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractInitialized represents a Initialized event raised by the PaymentContract contract.
type PaymentContractInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PaymentContract *PaymentContractFilterer) FilterInitialized(opts *bind.FilterOpts) (*PaymentContractInitializedIterator, error) {

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PaymentContractInitializedIterator{contract: _PaymentContract.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PaymentContract *PaymentContractFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PaymentContractInitialized) (event.Subscription, error) {

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractInitialized)
				if err := _PaymentContract.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PaymentContract *PaymentContractFilterer) ParseInitialized(log types.Log) (*PaymentContractInitialized, error) {
	event := new(PaymentContractInitialized)
	if err := _PaymentContract.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PaymentContract contract.
type PaymentContractOwnershipTransferredIterator struct {
	Event *PaymentContractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractOwnershipTransferred represents a OwnershipTransferred event raised by the PaymentContract contract.
type PaymentContractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaymentContract *PaymentContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PaymentContractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PaymentContractOwnershipTransferredIterator{contract: _PaymentContract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaymentContract *PaymentContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PaymentContractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractOwnershipTransferred)
				if err := _PaymentContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PaymentContract *PaymentContractFilterer) ParseOwnershipTransferred(log types.Log) (*PaymentContractOwnershipTransferred, error) {
	event := new(PaymentContractOwnershipTransferred)
	if err := _PaymentContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractPaymentIterator is returned from FilterPayment and is used to iterate over the raw logs and unpacked data for Payment events raised by the PaymentContract contract.
type PaymentContractPaymentIterator struct {
	Event *PaymentContractPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractPayment represents a Payment event raised by the PaymentContract contract.
type PaymentContractPayment struct {
	Payer  common.Address
	Uuid   string
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPayment is a free log retrieval operation binding the contract event 0xb5118c52291bb29d3c8e0b2bdc477f3ab93ffd496162843087d28d0a1e0b7b5e.
//
// Solidity: event Payment(address payer, string uuid, uint256 amount)
func (_PaymentContract *PaymentContractFilterer) FilterPayment(opts *bind.FilterOpts) (*PaymentContractPaymentIterator, error) {

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "Payment")
	if err != nil {
		return nil, err
	}
	return &PaymentContractPaymentIterator{contract: _PaymentContract.contract, event: "Payment", logs: logs, sub: sub}, nil
}

// WatchPayment is a free log subscription operation binding the contract event 0xb5118c52291bb29d3c8e0b2bdc477f3ab93ffd496162843087d28d0a1e0b7b5e.
//
// Solidity: event Payment(address payer, string uuid, uint256 amount)
func (_PaymentContract *PaymentContractFilterer) WatchPayment(opts *bind.WatchOpts, sink chan<- *PaymentContractPayment) (event.Subscription, error) {

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "Payment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractPayment)
				if err := _PaymentContract.contract.UnpackLog(event, "Payment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePayment is a log parse operation binding the contract event 0xb5118c52291bb29d3c8e0b2bdc477f3ab93ffd496162843087d28d0a1e0b7b5e.
//
// Solidity: event Payment(address payer, string uuid, uint256 amount)
func (_PaymentContract *PaymentContractFilterer) ParsePayment(log types.Log) (*PaymentContractPayment, error) {
	event := new(PaymentContractPayment)
	if err := _PaymentContract.contract.UnpackLog(event, "Payment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractRefundIterator is returned from FilterRefund and is used to iterate over the raw logs and unpacked data for Refund events raised by the PaymentContract contract.
type PaymentContractRefundIterator struct {
	Event *PaymentContractRefund // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractRefundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractRefund)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractRefund)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractRefundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractRefundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractRefund represents a Refund event raised by the PaymentContract contract.
type PaymentContractRefund struct {
	TaskId string
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRefund is a free log retrieval operation binding the contract event 0xeb1f9c839f2c49a478bb26cfe5e3ef6caf398587b0191897965a82480e28d0df.
//
// Solidity: event Refund(string taskId, address to, uint256 amount)
func (_PaymentContract *PaymentContractFilterer) FilterRefund(opts *bind.FilterOpts) (*PaymentContractRefundIterator, error) {

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "Refund")
	if err != nil {
		return nil, err
	}
	return &PaymentContractRefundIterator{contract: _PaymentContract.contract, event: "Refund", logs: logs, sub: sub}, nil
}

// WatchRefund is a free log subscription operation binding the contract event 0xeb1f9c839f2c49a478bb26cfe5e3ef6caf398587b0191897965a82480e28d0df.
//
// Solidity: event Refund(string taskId, address to, uint256 amount)
func (_PaymentContract *PaymentContractFilterer) WatchRefund(opts *bind.WatchOpts, sink chan<- *PaymentContractRefund) (event.Subscription, error) {

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "Refund")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractRefund)
				if err := _PaymentContract.contract.UnpackLog(event, "Refund", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefund is a log parse operation binding the contract event 0xeb1f9c839f2c49a478bb26cfe5e3ef6caf398587b0191897965a82480e28d0df.
//
// Solidity: event Refund(string taskId, address to, uint256 amount)
func (_PaymentContract *PaymentContractFilterer) ParseRefund(log types.Log) (*PaymentContractRefund, error) {
	event := new(PaymentContractRefund)
	if err := _PaymentContract.contract.UnpackLog(event, "Refund", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PaymentContractUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the PaymentContract contract.
type PaymentContractUpgradedIterator struct {
	Event *PaymentContractUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PaymentContractUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PaymentContractUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PaymentContractUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PaymentContractUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PaymentContractUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PaymentContractUpgraded represents a Upgraded event raised by the PaymentContract contract.
type PaymentContractUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PaymentContract *PaymentContractFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*PaymentContractUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _PaymentContract.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &PaymentContractUpgradedIterator{contract: _PaymentContract.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PaymentContract *PaymentContractFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *PaymentContractUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _PaymentContract.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PaymentContractUpgraded)
				if err := _PaymentContract.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PaymentContract *PaymentContractFilterer) ParseUpgraded(log types.Log) (*PaymentContractUpgraded, error) {
	event := new(PaymentContractUpgraded)
	if err := _PaymentContract.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
